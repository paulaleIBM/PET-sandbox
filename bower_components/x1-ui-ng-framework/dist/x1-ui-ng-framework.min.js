angular.module("x1.ui.framework",["ngSanitize","pascalprecht.translate","ui.bootstrap","ui.router","framework-home","macro-menu","x1.ui.utils","x1.ui.top-navigation","x1.ui.side-navigation","x1.ui.loading-bee"]);
angular.module("macro-menu",["x1.ui.tooltip","x1.ui.popover"]);
angular.module("framework-home",["x1.ui.tooltip","x1.ui.popover","x1.ui.modal"]);
angular.module("x1.ui.framework").config(["$urlRouterProvider","$translateProvider",function($urlRouterProvider,$translateProvider){"use strict";$urlRouterProvider.otherwise("/"),$translateProvider.fallbackLanguage("en_US"),$translateProvider.useStaticFilesLoader({prefix:"l10n/",suffix:".json"}),$translateProvider.preferredLanguage("en_US"),$translateProvider.useSanitizeValueStrategy("escaped")}]);
angular.module("x1.ui.framework").constant("frameworkConstants",{NAV_MENU:{DASHBOARDS:"FW:Dashboards",ANALYZE:"FW:Analyze",CREATE:"FW:Create",MANAGE:"FW:Manage",ADMIN:"FW:Admin",LIMITED_AVAILABILITY:"FW:Limited_Availability"},NOT_ON_MENU:"FW:not_on_menu",NAV_STATES:{HOME:"frameworkHome",DASHBOARDS:"frameworkHome.dashboards",ANALYZE:"frameworkHome.analyze",CREATE:"frameworkHome.create",MANAGE:"frameworkHome.manage",ADMIN:"frameworkHome.admin",LIMITED_AVAILABILITY:"frameworkHome.limited"},Events:{TOP_MACRO_MENU_CHANGED:"framework.topMacroMenuChanged",SHOW_BANNER:"framework:showBanner",BANNER_CLICKED:"framework:bannerClick",NAV_ITEMS_UPDATED:"framework:navItemsUpdated",TOP_NAV_ITEMS_UPDATED:"framework:topNavItemsUpdated",SUB_NAV_ITEMS_UPDATED:"framework:subNavItemsUpdated"}});
angular.module("x1.ui.framework").run(["$rootScope","$state",function($rootScope,$state){"use strict";$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){$state.previousState=fromState,$state.previousParams=fromParams})}]);
!function(){"use strict";function BannerController($rootScope,$timeout,$scope,BannerService,frameworkConstants){function itemClicked(item){$rootScope.$broadcast(frameworkConstants.Events.BANNER_CLICKED,item),toggleBanner(!1)}function toggleBanner(val){if(val&&vm.bannerVisible)bannerTimeout&&$timeout.cancel(bannerTimeout),hideBanner(),animationTimeout&&$timeout.cancel(animationTimeout),animationTimeout=$timeout(showBanner,500);else if(!val&&vm.bannerVisible)bannerTimeout&&$timeout.cancel(bannerTimeout),hideBanner(!0);else{if(!val||vm.bannerVisible)return;showBanner()}}function hideBanner(check){vm.bannerVisible=!1,BannerService.updateQueue(!1),vm.banner={},check&&bannerCheck()}function setUpBanner(notifications){BannerService.updateQueue(!0,notifications),bannerCheck()}function bannerCheck(){var notifications=BannerService.getQueue(),isCurrent=angular.equals(vm.banner,notifications[0]);if(notifications.length>0&&!isCurrent)nextBanner=angular.copy(notifications[0]),$timeout(function(){vm.toggleBanner(!0)},0);else{if(!(notifications.length>1&&isCurrent))return;nextBanner=angular.copy(notifications[1]),$timeout(function(){vm.toggleBanner(!0)},0)}}function showBanner(){vm.banner=nextBanner,vm.bannerVisible=!0,bannerTimeout=$timeout(function(){hideBanner(!0)},1e4)}var bannerTimeout,animationTimeout,vm=this,nextBanner=null,notificationListener=$rootScope.$on(frameworkConstants.Events.SHOW_BANNER,function(e,eData){setUpBanner(eData)});vm.bannerVisible=!1,vm.bannerClass="bg-info",vm.banner={},vm.toggleBanner=toggleBanner,vm.itemClicked=itemClicked,$scope.$on("$destroy",function(){notificationListener(),$timeout.cancel()})}angular.module("x1.ui.framework").controller("BannerController",BannerController),BannerController.$inject=["$rootScope","$timeout","$scope","BannerService","frameworkConstants"]}();
!function(){"use strict";function fwBanner(){return{scope:!0,restrict:"EA",replace:!1,templateUrl:"banner/banner.html",controller:"BannerController",controllerAs:"vm"}}angular.module("x1.ui.framework").directive("fwBanner",fwBanner)}();
!function(){"use strict";function BannerService(){function updateQueue(addItem,notificationArr){if(addItem)for(var i=0,len=notificationArr.length;i<len;i+=1)notificationCheck(notificationArr[i])||notificationQueue.push(notificationArr[i]);else{if(!(notificationQueue.length>0))return;notificationQueue.shift()}}function getQueue(){return notificationQueue}function notificationCheck(notification){for(var i=0,len=notificationQueue.length;i<len;i+=1)if(angular.equals(notificationQueue[i],notification))return!0;return!1}var notificationQueue=[],service={updateQueue:updateQueue,getQueue:getQueue};return service}angular.module("x1.ui.framework").factory("BannerService",BannerService)}();
!function(){"use strict";function fwBreadCrumbs($rootScope,$state,BreadcrumbsService,x1Utils,SideNavConstants){function linkFunc(scope){scope.data={},scope.data.breadcrumbs=BreadcrumbsService.generateCrumbs($state.current);var sideNavListener=$rootScope.$on(SideNavConstants.EVENTS.sideNavItemClicked,function(e,item){item.stateConfig&&item.stateConfig.data&&item.stateConfig.data.parentMenu&&BreadcrumbsService.resetStates(item.stateConfig.data.parentMenu)});scope.getDisplayName=function(breadcrumb){if(breadcrumb.data&&breadcrumb.data.displayName)return breadcrumb.data.displayName;if(breadcrumb.data&&breadcrumb.data.name){var translatedName=x1Utils.translate(breadcrumb.data.name);return translatedName!==breadcrumb.data.name?(breadcrumb.data.displayName=translatedName,breadcrumb.data.displayName):breadcrumb.data.name}return breadcrumb.name},scope.changeState=function(targetState){$state.go(targetState.name,$state.params)},scope.$on("$stateChangeSuccess",function(event,toState){scope.data.breadcrumbs=BreadcrumbsService.generateCrumbs(toState)}),scope.$on("$destroy",function(){sideNavListener()})}var directive={scope:!1,restrict:"EA",replace:!1,templateUrl:"breadcrumbs/breadcrumbs.html",link:linkFunc};return directive}angular.module("x1.ui.framework").directive("fwBreadCrumbs",fwBreadCrumbs),fwBreadCrumbs.$inject=["$rootScope","$state","BreadcrumbsService","x1Utils","x1.ui.side-navigation.constant"]}();
!function(){"use strict";function breadcrumbsService($state){function resetStates(targetParentState){stateList=[targetParentState]}function generateCrumbs(currentState){storeStates(currentState);var crumbsArray=[currentState],setState=currentState;do{var nextObj=hasParent(setState);nextObj.nextState&&(crumbsArray.unshift(nextObj.nextState),setState=nextObj.nextState)}while(nextObj.getParent);return crumbsArray}function storeStates(state){var inArr=arrayCheck(state.name);inArr&&stateList.splice(inArr,1),stateList.push(state),stateList.length>5&&stateList.shift()}function hasParent(state){var stateSettings={nextState:null,getParent:!1};if(state.hasOwnProperty("data")&&state.data.parentStates){var parents=state.data.parentStates,visited=[];if(parents.length>1){for(var chosenOne=null,i=0,len=parents.length;i<len;i+=1){var matchIndex=arrayCheck(parents[i]);matchIndex&&visited.push(matchIndex)}visited.length>1?chosenOne=stateList[getHighestVal(visited)]:1===visited.length?chosenOne=stateList[visited[0]]:(chosenOne=$state.get(parents[0]),backfillStates(state.name,chosenOne)),chosenOne&&(stateSettings={nextState:chosenOne,getParent:chosenOne.hasOwnProperty("data")&&chosenOne.data.parentStates})}else if(parents[0]){var statesParent=$state.get(parents[0]);stateSettings={nextState:statesParent,getParent:statesParent.hasOwnProperty("data")&&statesParent.data.parentStates},arrayCheck(parents[0])||backfillStates(state.name,statesParent)}}return stateSettings}function getHighestVal(arr){return Math.max.apply(null,arr)}function arrayCheck(stateName){for(var match=!1,i=0,len=stateList.length;i<len;i+=1)if(stateList[i].name===stateName){match=i;break}return match}function backfillStates(targetStateName,insertState){var targetIndex=arrayCheck(targetStateName);stateList.splice(targetIndex,0,insertState),stateList.length>5&&stateList.shift()}var stateList=[],service={resetStates:resetStates,generateCrumbs:generateCrumbs};return service}angular.module("x1.ui.framework").factory("BreadcrumbsService",breadcrumbsService),breadcrumbsService.$inject=["$state"]}();
angular.module("x1.ui.framework").factory("logoutSrv",["$http","$q","$log",function($http,$q,$log){"use strict";return{doLogout:function(){var deferred=$q.defer();return $http.post("/api/journey/users/logout").then(function(result){$log.debug("logoutSrv call:  ",result),deferred.resolve()},function(error){deferred.reject(error)}),deferred.promise}}}]);
!function(){"use strict";function OrgSwitchController($rootScope,$scope,frameworkHomeSrv){var vm=this,originalOrgId=null;vm.showLoading=!0,vm.orgArray=[],vm.selectedOrg=null,$scope.data.getOrgs().then(function(resp){vm.orgArray=resp.data;var userData=frameworkHomeSrv.getUser();originalOrgId=userData.orgId;for(var i=0,len=vm.orgArray.length;i<len;i+=1)if(vm.orgArray[i].orgId===originalOrgId){$scope.data.selectedOrg=vm.orgArray[i],$scope.data.selectedOrg.selected=!0;break}vm.showLoading=!1}),vm.selectOrg=function(org){$scope.$parent.options.actionDisabled=org.orgId===originalOrgId,org.orgId!==$scope.data.selectedOrg.orgId&&($scope.data.selectedOrg.selected=!1,org.selected=!0,$scope.data.selectedOrg=org)}}angular.module("x1.ui.framework").controller("OrgSwitchController",OrgSwitchController),OrgSwitchController.$inject=["$rootScope","$scope","frameworkHomeSrv"]}();
!function(){"use strict";function subNavWidgetsService($state){function setVisibility(widgets){for(var i=0,len=widgets.length;i<len;i+=1){var w=widgets[i];w.validStates?w.makeVisible=inArray(w.validStates):w.makeVisible=!w.makeVisible||w.makeVisible}}function inArray(states){for(var exists=!1,i=0,len=states.length;i<len;i+=1)if($state.includes(states[i])){exists=!0;break}return exists}var service={setVisibility:setVisibility};return service}angular.module("x1.ui.framework").factory("SubNavWidgetsService",subNavWidgetsService),subNavWidgetsService.$inject=["$state"]}();
!function(){"use strict";function fwTopLevel($compile){function linkFunc(scope,element){element.replaceWith($compile(scope.item)(scope))}var directive={scope:{item:"="},restrict:"EA",template:"",link:linkFunc};return directive}angular.module("x1.ui.framework").directive("fwTopLevel",fwTopLevel),fwTopLevel.$inject=["$compile"]}();
angular.module("macro-menu").directive("topMacroMenu",["$x1popover",function($x1popover){return{restrict:"EA",link:function($scope,element){$scope.topMacroMenuPopover=$x1popover(element,{placement:"bottom-right",trigger:"manual",contentTemplate:"macro-menu/macro-menu.html",outsideClick:!0})},controller:"topMacroMenuCtrl"}}]);
angular.module("macro-menu").controller("topMacroMenuCtrl",["$rootScope","$scope","frameworkHomeSrv","$state","$log","topMacroMenuService","frameworkConstants",function($rootScope,$scope,frameworkHomeSrv,$state,$log,topMacroMenuService,frameworkConstants){"use strict";function getMacroMenuItems(){var macroMenuItemsResult;if($scope.navItems){macroMenuItemsResult=[];for(var i=0;i<$scope.navItems.length;i++)$scope.navItems[i]&&$scope.navItems[i].items&&$scope.navItems[i].items.length>0&&macroMenuItemsResult.push($scope.navItems[i])}return macroMenuItemsResult}function doTopMacroMenu(){$scope.toggleTopMacroMenu(),passDataToTopMacroMenuPopover(),showOrHideTopMacroMenu()}function passDataToTopMacroMenuPopover(){$scope.topMacroMenuPopover.$scope.navItems=$scope.navItems,$scope.topMacroMenuPopover.$scope.macroMenuColumnLimit=4,$scope.topMacroMenuPopover.$scope.goToUrl=function(itemState){$state.go(itemState),$scope.isTopMacroMenuOpen=topMacroMenuService.hideTopMacroMenu($scope.topMacroMenuPopover)},$scope.topMacroMenuPopover.$scope.macroMenuColumnWidth=function(){var result="col-md-3",popOverNavItems=$scope.topMacroMenuPopover.$scope.navItems;return popOverNavItems.length&&popOverNavItems.length<=$scope.topMacroMenuPopover.$scope.macroMenuColumnLimit&&(result="col-md-"+12/popOverNavItems.length),result}}function showOrHideTopMacroMenu(){$scope.isTopMacroMenuOpen?$scope.isTopMacroMenuOpen=topMacroMenuService.showTopMacroMenu($scope.topMacroMenuPopover):$scope.isTopMacroMenuOpen=topMacroMenuService.hideTopMacroMenu($scope.topMacroMenuPopover)}$scope.topMacroMenuPopover={},$scope.navItems=getMacroMenuItems(),$scope.toggleTopMacroMenu=function(){$scope.isTopMacroMenuOpen=!$scope.isTopMacroMenuOpen},$scope.$on(frameworkConstants.Events.TOP_MACRO_MENU_CHANGED,function(){doTopMacroMenu(),$scope.hamburgerState="active"===$scope.hamburgerState?"":"active"})}]);
angular.module("macro-menu").service("topMacroMenuService",[function(){"use strict";this.hideTopMacroMenu=function(topMacroMenuPopover){var isTopMacroMenuOpen=!0;return topMacroMenuPopover&&(topMacroMenuPopover.$scope.$hide(),isTopMacroMenuOpen=!1),isTopMacroMenuOpen},this.showTopMacroMenu=function(topMacroMenuPopover){var isTopMacroMenuOpen=!1;return topMacroMenuPopover&&(topMacroMenuPopover.$scope.$show(),isTopMacroMenuOpen=!0),isTopMacroMenuOpen}}]);
angular.module("framework-home").provider("frameworkCreateStates",function($stateProvider){this.$get=function(){return{addState:function(stateName,stateConfig){$stateProvider.state(stateName,stateConfig)}}}}).config(["$stateProvider",function($stateProvider){"use strict";$stateProvider.state("frameworkHome",{url:"",templateUrl:"home/framework-home.html",controller:"frameworkHomeCtrl"}).state("frameworkHome.dashboards",{url:"/dashboards",data:{name:"x1UiNgFramework.NAV.DASHBOARDS",dummyLink:!0}}).state("frameworkHome.analyze",{url:"/analyze",data:{name:"x1UiNgFramework.NAV.ANALYZE",dummyLink:!0}}).state("frameworkHome.create",{url:"/create",data:{name:"x1UiNgFramework.NAV.CREATE",dummyLink:!0}}).state("frameworkHome.manage",{url:"/manage",data:{name:"x1UiNgFramework.NAV.MANAGE",dummyLink:!0}}).state("frameworkHome.admin",{url:"/admin",data:{name:"x1UiNgFramework.NAV.ADMIN",dummyLink:!0}}).state("frameworkHome.limited",{url:"/limited",data:{name:"x1UiNgFramework.NAV.LIMITED_AVAILABILITY",dummyLink:!0}})}]);
angular.module("framework-home").controller("frameworkHomeCtrl",["$rootScope","$scope","frameworkHomeSrv","SubNavWidgetsService","x1Utils","$state","$window","$log","x1.ui.popover.events","frameworkConstants","logoutSrv","x1Modal",function($rootScope,$scope,frameworkHomeSrv,SubNavWidgetsService,x1Utils,$state,$window,$log,popoverEvent,frameworkConstants,logoutSrv,x1Modal){"use strict";function initSubNav(){var widgets=frameworkHomeSrv.getSecondaryLevel();SubNavWidgetsService.setVisibility(widgets)}$scope.isSideNavOpen=!0,$scope.topMacroMenuOption=!1,$scope.navItems=frameworkHomeSrv.getNavItems(),$scope.topLevel=frameworkHomeSrv.getTopLevel(),$scope.subNavWidgets=frameworkHomeSrv.getSecondaryLevel(),initSubNav();var stateListener=$rootScope.$on("$stateChangeSuccess",function(){initSubNav()});$scope.productTitle=frameworkHomeSrv.getProductTitle(),$scope.showBetaBadge=function(){return frameworkHomeSrv.getShowBetaBadge()?x1Utils.translate("x1UiNgFramework.BETA"):""},$scope.version="",$scope.user=frameworkHomeSrv.getUser(),$scope.toggleMenu=function(){$scope.isSideNavOpen=!$scope.isSideNavOpen},$scope.$on("x1.ui.top-navigation.hamburger.click",function(){$scope.topMacroMenuOption?$scope.$emit(frameworkConstants.Events.TOP_MACRO_MENU_CHANGED):$scope.toggleMenu(),$scope.hamburgerState="active"===$scope.hamburgerState?"":"active"}),$scope.logout=function(){$scope.$broadcast(popoverEvent.CANCEL_POPOVER),$state.go("frameworkHome"),logoutSrv.doLogout().then(function(result){$window.open(result,"CSA_Logout")},function(error){$log.error("Unable to generate Doc Url: ",error)})},$scope.getHelpItems=function(){return frameworkHomeSrv.getHelpItems()},$scope.switchOrg=function(){var handler=frameworkHomeSrv.getOrgCallback(),orgModal={options:{headerText:x1Utils.translate("x1UiNgFramework.ORG_MODAL.HEADER"),showCloseButton:!1,actionButtonText:x1Utils.translate("x1UiNgFramework.ORG_MODAL.OK"),actionDisabled:!0},settings:{size:"xl",contentTemplate:"org-switch/org-switch.html"},data:{getOrgs:handler}};x1Modal.show(orgModal).then(function(data){var sendSelected=frameworkHomeSrv.getSelectedOrgCallback();sendSelected(data)})};var navListener=$rootScope.$on(frameworkConstants.Events.NAV_ITEMS_UPDATED,function(event,navItems){$scope.navItems=navItems}),topNavListener=$rootScope.$on(frameworkConstants.Events.TOP_NAV_ITEMS_UPDATED,function(event,navItems){$scope.topnavItems=navItems}),subNavListener=$rootScope.$on(frameworkConstants.Events.SUB_NAV_ITEMS_UPDATED,function(event,navItems){$scope.subnavItems=navItems});$scope.$on("destroy",function(){stateListener(),navListener(),topNavListener(),subNavListener()})}]);
angular.module("framework-home").service("frameworkHomeSrv",["x1Utils","frameworkConstants","frameworkCreateStates","$rootScope",function(x1Utils,frameworkConstants,frameworkCreateStates,$rootScope){"use strict";function createStates(parentMenu,items){var i,len=items.length;for(i=0;i<len;i++){var item=items[i];x1Utils.ensureDefined(item,"stateConfig.data"),item.stateConfig.data.parentStates?item.stateConfig.data.parentMenu=parentMenu.state:item.stateConfig.data.parentStates=[parentMenu.state],item.stateConfig.data.name=item.stateConfig.data.name||item.name}for(i=0;i<len;i++)frameworkCreateStates.addState(items[i].state,items[i].stateConfig)}var navItems,dashboardsMenu,analyzeMenu,createMenu,manageMenu,adminMenu,limitedMenu,productTitle,helpItems,showBetaBadge=!1,user={firstName:""},orgCallBack=null,selectedCallBack=null;this.setTranslatedMenuHeaderLabels=function(navHeaderTranslationsPassed){dashboardsMenu.name=navHeaderTranslationsPassed.dashboardsTitle,analyzeMenu.name=navHeaderTranslationsPassed.analyzeTitle,createMenu.name=navHeaderTranslationsPassed.createTitle,manageMenu.name=navHeaderTranslationsPassed.manageTitle,adminMenu.name=navHeaderTranslationsPassed.adminTitle,limitedMenu.name=navHeaderTranslationsPassed.limitedTitle},dashboardsMenu={name:x1Utils.translate("x1UiNgFramework.NAV.DASHBOARDS"),header:!0,state:frameworkConstants.NAV_STATES.DASHBOARDS,id:"dashboards","class":"dashboards empty-header",icon:"",isOpen:!0,active:!0,items:[]},analyzeMenu={name:x1Utils.translate("x1UiNgFramework.NAV.ANALYZE"),header:!0,state:frameworkConstants.NAV_STATES.ANALYZE,id:"analyze","class":"analyze empty-header",icon:"",isOpen:!0,items:[]},createMenu={name:x1Utils.translate("x1UiNgFramework.NAV.CREATE"),header:!0,state:frameworkConstants.NAV_STATES.CREATE,id:"create","class":"create empty-header",icon:"",isOpen:!0,items:[]},manageMenu={name:x1Utils.translate("x1UiNgFramework.NAV.MANAGE"),header:!0,state:frameworkConstants.NAV_STATES.MANAGE,id:"manage","class":"manage empty-header",icon:"",isOpen:!0,items:[]},adminMenu={name:x1Utils.translate("x1UiNgFramework.NAV.ADMIN"),header:!0,state:frameworkConstants.NAV_STATES.ADMIN,id:"admim","class":"plan empty-header",icon:"",isOpen:!0,items:[]},limitedMenu={name:x1Utils.translate("x1UiNgFramework.NAV.LIMITED_AVAILABILITY"),header:!0,state:frameworkConstants.NAV_STATES.LIMITED_AVAILABILITY,id:"limited","class":"limited empty-header",icon:"",isOpen:!0,items:[]},navItems=[dashboardsMenu,analyzeMenu,createMenu,manageMenu,adminMenu,limitedMenu],helpItems=[];var topLevel=[],secondaryLevel=[];this.getNavItems=function(){return navItems},this.getUser=function(){return user},this.setUser=function(userObject){user=angular.extend(user,userObject)},this.addToFramework=function(menuGroup,items){var menu;switch(menuGroup){case frameworkConstants.NAV_MENU.DASHBOARDS:menu=dashboardsMenu;break;case frameworkConstants.NAV_MENU.ANALYZE:menu=analyzeMenu;break;case frameworkConstants.NAV_MENU.CREATE:menu=createMenu;break;case frameworkConstants.NAV_MENU.MANAGE:menu=manageMenu;break;case frameworkConstants.NAV_MENU.ADMIN:menu=adminMenu;break;case frameworkConstants.NAV_MENU.LIMITED_AVAILABILITY:menu=limitedMenu;break;case frameworkConstants.NOT_ON_MENU:menu={state:null,items:[]};break;default:return}menu.items=menu.items.concat(items),createStates(menu,items),$rootScope.$emit(frameworkConstants.Events.NAV_ITEMS_UPDATED,navItems)},this.getDashboardsMenu=function(){return dashboardsMenu},this.getAnalyzeMenu=function(){return analyzeMenu},this.getCreateMenu=function(){return createMenu},this.getManageMenu=function(){return manageMenu},this.getAdminMenu=function(){return adminMenu},this.getLimitedMenu=function(){return limitedMenu},this.addToTopNav=function(newItems){topLevel=topLevel.concat(newItems)},this.getTopLevel=function(){return topLevel},this.addToSubNav=function(newItems){secondaryLevel=secondaryLevel.concat(newItems)},this.getSecondaryLevel=function(){return secondaryLevel},this.setProductTitle=function(title){productTitle=title},this.getProductTitle=function(){return productTitle},this.setShowBetaBadge=function(show){showBetaBadge=show},this.getShowBetaBadge=function(){return showBetaBadge},this.addHelpItem=function(displayTitle,callback){helpItems.push({name:displayTitle,handleClick:callback})},this.getHelpItems=function(){return helpItems},this.setOrgCallback=function(callback){orgCallBack=callback},this.getOrgCallback=function(){return orgCallBack},this.setSelectedOrgCallback=function(callback){selectedCallBack=callback},this.getSelectedOrgCallback=function(){return selectedCallBack}}]);
!function(module){try{module=angular.module("x1.ui.framework")}catch(e){module=angular.module("x1.ui.framework",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("banner/banner.html",'<div ng-if="vm.bannerVisible" ng-class="[vm.banner.type, { true: \'menu-open\' }[$parent.isSideNavOpen]]" class="framework-banner">\n    <span class="glyphicon glyphicon-md" ng-class="{ \'bg-success\': \'glyphicon-ok-circle\', \'bg-info\': \'glyphicon-info-circle\' }[vm.banner.type]"></span>\n    <span class="banner-msg">\n        <span>{{vm.banner.message}}</span>\n        <span class="btn-link" ng-if="vm.banner.linkText" ng-click="vm.itemClicked(vm.banner)" ng-bind="vm.banner.linkText | translate"></span>\n    </span>\n    <span class="glyphicon glyphicon-xs glyphicon-remove" ng-click="vm.toggleBanner(false)"></span>\n</div>')}])}();
!function(module){try{module=angular.module("x1.ui.framework")}catch(e){module=angular.module("x1.ui.framework",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("breadcrumbs/breadcrumbs.html",'<ul class="framework-breadcrumbs" role="menu">\n\t<li role="menu-item" ng-repeat="crumb in data.breadcrumbs" ng-class="{ \'last-crumb\': $last }">\n\t\t<a class="crumb-dummy" ng-if="!$last && crumb.data.dummyLink">{{getDisplayName(crumb)}}</a>\n\t\t<a class="crumb" ng-if="!$last && !crumb.data.dummyLink" ng-click="changeState(crumb)">\n\t\t\t{{getDisplayName(crumb)}}</a>\n\t\t<span ng-if="!$last" class="glyphicon glyphicon-chevron-right"></span>\n        <a class="crumb-selected" ng-if="$last">{{getDisplayName(crumb)}}</a>\n\t</li>\n</ul>')}])}();
!function(module){try{module=angular.module("x1.ui.framework")}catch(e){module=angular.module("x1.ui.framework",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("help-menu/help-popover.html",'<div class="top-nav-menu list-group" role="menu">\n    <a ng-repeat="item in getHelpItems()" class="list-group-item" name="{{item.name | translate}}" ng-class="{\'disabled\': item.disabled, \'active\': item.active}" role="menuitem" aria-label="{{item.name | translate}}" ng-click="item.handleClick()" ng-keydown="accessibleClick(item, $event)" translate="{{item.name}}"></a>\n</div>')}])}();
!function(module){try{module=angular.module("x1.ui.framework")}catch(e){module=angular.module("x1.ui.framework",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("profile/profile-popover.html",'<ul class="top-nav-menu list-group" role="menu">\n    <li class="list-group-item">\n        <a ng-click="logout()" class="item-name list-item-link" translate="x1UiNgFramework.PROFILE.LOGOUT"></a>\n    </li>\n</ul>')}])}();
!function(module){try{module=angular.module("x1.ui.framework")}catch(e){module=angular.module("x1.ui.framework",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("org-switch/org-switch.html",'<div ng-controller="OrgSwitchController as vm">\n\t<div class="framework-org-switch">\n\t\t<div class="org-list-container">\n\t\t\t<x1-loading-bee size="60px" ng-show="vm.showLoading"></x1-loading-bee>\n\t\t\t<div ng-repeat="org in vm.orgArray" class="org-list-item" ng-click="vm.selectOrg(org)">\n\t\t\t\t<div class="org-list-item-selection" ng-class="{\'empty\':!org.selected, \'selected\':org.selected }"></div>\n\t\t\t\t<div class="item-text-wrap">\n\t\t\t\t\t<div class="org-list-item-name"><strong>{{org.orgName}}</strong></div>\n\t\t\t\t\t<div class="org-list-item-id">{{org.orgId}}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>')}])}();
!function(module){try{module=angular.module("x1.ui.framework")}catch(e){module=angular.module("x1.ui.framework",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("user-menu/user-popover.html",'<div class="top-nav-menu list-group" role="menu">\n    <a class="list-group-item switch-org" ng-click="switchOrg()" translate="x1UiNgFramework.USER_MENU.SWITCH"></a>\n    <!-- <a class="list-group-item" ng-class="logout" ng-click="logout()">Logout</a> -->\n</div>')}])}();
!function(module){try{module=angular.module("x1.ui.framework")}catch(e){module=angular.module("x1.ui.framework",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("macro-menu/macro-menu.html",'<div class="macro-menu-popover">\n    <div class="row">\n            <div ng-class="macroMenuColumnWidth()" ng-repeat="macroMenuItem in navItems | limitTo: macroMenuColumnLimit ">\n                <span class="macro-menu-header-title">{{macroMenuItem.name | translate}}</span>\n                <hr class="divider">\n              <ul>\n                <li ng-repeat="item in macroMenuItem.items">\n                    <a ng-click="goToUrl(item.state)">\n                        {{item.name| translate}}\n                    </a>\n                </li>\n              </ul>\n            </div>\n    </div>\n</div>\n')}])}();
!function(module){try{module=angular.module("x1.ui.framework")}catch(e){module=angular.module("x1.ui.framework",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("home/framework-home.html",'<div class="top-macro-menu-popover">\n       <span top-macro-menu>\n\t   </span>\n</div>\n<x1-top-navigation hamburger="true" brand="{{productTitle | translate}}" brand-href="#/workspaces" brand-badge="{{showBetaBadge()}}" data-html2canvas-ignore="true" is-mobile="true" is-hamburger-active="true" is-fixed="true">\n\t<span ng-if="user" class="client-details" data-trigger="hover" data-placement="bottom" data-title="{{user.masterSubClientIds[user.clientId]}} - {{user.clientId}}" x1-tooltip>\n\t\t<span class="navbar-brand">{{user.masterSubClientIds[user.clientId]}}</span>\n\t</span>\n\t<span ng-if="user.orgName" class="navbar-org">\n\t\t<span class="glyphicon glyphicon-chevron-right"></span>\n\t\t<span class="org-text">{{user.orgName}}</span>\n\t</span>\n\n\t<h2 id="x1TopNavSecondary" class="sr-only" translate="x1UiNgTopNavigationDemo.NAV2_SR_TEXT"></h2>\n\t<ul class="nav navbar-nav navbar-right framework-nav" role="menu" aria-labelledby="x1TopNavSecondary">\n\t\t<li role="menuitem" ng-repeat="item in topLevel">\n\t\t\t<fw-top-level item="item"></fw-top-level>\n\t\t</li>\n\t\t<li role="menuitem" class="dropdown">\n\t\t\t<a x1-popover="{placement: \'bottom-left\'}" placement="bottom-left" outside-click="true" content-template="user-menu/user-popover.html" class="main-menu-link user-menu">\n\t\t\t\t<span class="glyphicon glyphicon-md glyphicon-user pull-left" aria-hidden="true"></span>\n\t\t\t\t<span class="user-actions-nav-text">{{ user.firstName }}</span>\n\t\t\t</a>\n\t\t</li>\n\t\t<li role="menuitem">\n\t\t\t<a x1-popover="{placement: \'bottom-left\'}" placement="bottom-left" outside-click="true" content-template="help-menu/help-popover.html" class="main-menu-link">\n\t\t\t<!--<a x1-popover="helpPover" outside-click="true" class="main-menu-link">-->\n\t\t\t\t<span class="glyphicon glyphicon-md glyphicon-question-circle pull-left" aria-hidden="true"></span>\n\t\t\t\t<span translate="x1UiNgFramework.CONTROLS.HELP"></span>\n\t\t\t</a>\n\t\t</li>\n\t\t<li role="menuitem">\n\t\t\t<span class="sr-only" translate="x1UiNgFramework.IBM"></span>\n\t\t\t<span class="navbar-brand ibm-logo" title="{{\'x1UiNgFramework.IBM\' | translate}}"></span>\n\t\t</li>\n\t</ul>\n</x1-top-navigation>\n<x1-side-navigation is-open="isSideNavOpen" items="navItems" is-stateful="true" data-html2canvas-ignore="true"></x1-side-navigation>\n<section class="banner-alerts" ng-class="{\'side-nav-open\': isSideNavOpen}" ng-if="alerts.length > 0">\n\t<alert ng-repeat="alert in alerts track by $index" type="{{alert[0].type}}" close="closeAlert($index)">\n\t\t<span class="glyphicon" ng-class="setIcon(alert[0])"></span>\n\t\t<ng-include src="\'alerts/alert-templates/\' + alert[0].localizationKey +\'.html\'"></ng-include>\n\t</alert>\n</section>\n<fw-banner class="banner-container"></fw-banner>\n<div class="subnav" ng-class="{ \'menu-open\': isSideNavOpen }">\n\t<fw-bread-crumbs></fw-bread-crumbs>\n\t<ul class="nav navbar-nav navbar-right" role="menu">\n\t\t<li role="menuitem" ng-repeat="widg in subNavWidgets" ng-if="widg.makeVisible">\n\t\t\t<fw-top-level item="widg.widget"></fw-top-level>\n\t\t</li>\n\t</ul>\n</div>\n<section ui-view class="home-content" ng-class="{\'menu-open\': isSideNavOpen}"><p> </p>\n</section>\n<section class="contextual-help" ng-if="appMetadata.showContextualHelp && contextualHelpMessage" ng-mouseenter="contextualHelpMouseEnter()" ng-mouseleave="contextualHelpMouseLeave()">\n\t<div class="contextual-help-icon-container">\n\t\t<div class="glyphicon glyphicon-lg glyphicon-question-circle contextual-help-icon"></div>\n\t</div>\n\t<p class="contextual-help-message" translate="ibmda.contextualHelpMessages.{{contextualHelpMessage}}"></p>\n\t<span class="glyphicon glyphicon-xs glyphicon-remove contextual-help-close" ng-click="closeContextualHelpMessage()"></span>\n\t<div class="contextual-help-controls"><a ng-click="closeContextualHelpMessage()" translate="ibmda.contextualHelpMessages.okGotIt"></a> | <a ng-click="dontShowContextualHelpForever()" translate="ibmda.contextualHelpMessages.dontShowTheseAgain"></a></div>\n</section>\n')}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyYW1ld29yay5tb2R1bGUuanMiLCJtYWNyby1tZW51L21hY3JvLW1lbnUubW9kdWxlLmpzIiwiaG9tZS9mcmFtZXdvcmstaG9tZS5tb2R1bGUuanMiLCJmcmFtZXdvcmsuY29uZmlnLmpzIiwiZnJhbWV3b3JrLmNvbnN0YW50cy5qcyIsImZyYW1ld29yay5ydW4uanMiLCJiYW5uZXIvYmFubmVyLmNvbnRyb2xsZXIuanMiLCJiYW5uZXIvYmFubmVyLmRpcmVjdGl2ZS5qcyIsImJhbm5lci9iYW5uZXIuc2VydmljZS5qcyIsImJyZWFkY3J1bWJzL2JyZWFkY3J1bWJzLmRpcmVjdGl2ZS5qcyIsImJyZWFkY3J1bWJzL2JyZWFkY3J1bWJzLnNlcnZpY2UuanMiLCJwcm9maWxlL2xvZ291dC5zZXJ2aWNlLmpzIiwib3JnLXN3aXRjaC9vcmctc3dpdGNoLmNvbnRyb2xsZXIuanMiLCJzdWJuYXYtd2lkZ2V0cy9zdWJuYXYtd2lkZ2V0cy5zZXJ2aWNlLmpzIiwidG9wbGV2ZWwvdG9wbGV2ZWwuZGlyZWN0aXZlLmpzIiwibWFjcm8tbWVudS9tYWNyby1tZW51LmRpcmVjdGl2ZS5qcyIsIm1hY3JvLW1lbnUvbWFyY28tbWVudS5jb250cm9sbGVyLmpzIiwibWFjcm8tbWVudS9tYXJjcm8tbWVudS5zZXJ2aWNlLmpzIiwiaG9tZS9mcmFtZXdvcmstaG9tZS5jb25maWcuanMiLCJob21lL2ZyYW1ld29yay1ob21lLmNvbnRyb2xsZXIuanMiLCJob21lL2ZyYW1ld29yay1ob21lLnNlcnZpY2UuanMiLCJiYW5uZXIvYmFubmVyLmpzIiwiYnJlYWRjcnVtYnMvYnJlYWRjcnVtYnMuanMiLCJoZWxwLW1lbnUvaGVscC1wb3BvdmVyLmpzIiwicHJvZmlsZS9wcm9maWxlLXBvcG92ZXIuanMiLCJvcmctc3dpdGNoL29yZy1zd2l0Y2guanMiLCJ1c2VyLW1lbnUvdXNlci1wb3BvdmVyLmpzIiwibWFjcm8tbWVudS9tYWNyby1tZW51LmpzIiwiaG9tZS9mcmFtZXdvcmstaG9tZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJHRyYW5zbGF0ZVByb3ZpZGVyIiwib3RoZXJ3aXNlIiwiZmFsbGJhY2tMYW5ndWFnZSIsInVzZVN0YXRpY0ZpbGVzTG9hZGVyIiwicHJlZml4Iiwic3VmZml4IiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJ1c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kiLCJjb25zdGFudCIsIk5BVl9NRU5VIiwiREFTSEJPQVJEUyIsIkFOQUxZWkUiLCJDUkVBVEUiLCJNQU5BR0UiLCJBRE1JTiIsIkxJTUlURURfQVZBSUxBQklMSVRZIiwiTk9UX09OX01FTlUiLCJOQVZfU1RBVEVTIiwiSE9NRSIsIkV2ZW50cyIsIlRPUF9NQUNST19NRU5VX0NIQU5HRUQiLCJTSE9XX0JBTk5FUiIsIkJBTk5FUl9DTElDS0VEIiwiTkFWX0lURU1TX1VQREFURUQiLCJUT1BfTkFWX0lURU1TX1VQREFURUQiLCJTVUJfTkFWX0lURU1TX1VQREFURUQiLCJydW4iLCIkcm9vdFNjb3BlIiwiJHN0YXRlIiwiJG9uIiwiZXZlbnQiLCJ0b1N0YXRlIiwidG9QYXJhbXMiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIiwicHJldmlvdXNTdGF0ZSIsInByZXZpb3VzUGFyYW1zIiwiQmFubmVyQ29udHJvbGxlciIsIiR0aW1lb3V0IiwiJHNjb3BlIiwiQmFubmVyU2VydmljZSIsImZyYW1ld29ya0NvbnN0YW50cyIsIml0ZW1DbGlja2VkIiwiaXRlbSIsIiRicm9hZGNhc3QiLCJ0b2dnbGVCYW5uZXIiLCJ2YWwiLCJ2bSIsImJhbm5lclZpc2libGUiLCJiYW5uZXJUaW1lb3V0IiwiY2FuY2VsIiwiaGlkZUJhbm5lciIsImFuaW1hdGlvblRpbWVvdXQiLCJzaG93QmFubmVyIiwiY2hlY2siLCJ1cGRhdGVRdWV1ZSIsImJhbm5lciIsImJhbm5lckNoZWNrIiwic2V0VXBCYW5uZXIiLCJub3RpZmljYXRpb25zIiwiZ2V0UXVldWUiLCJpc0N1cnJlbnQiLCJlcXVhbHMiLCJsZW5ndGgiLCJuZXh0QmFubmVyIiwiY29weSIsInRoaXMiLCJub3RpZmljYXRpb25MaXN0ZW5lciIsImUiLCJlRGF0YSIsImJhbm5lckNsYXNzIiwiY29udHJvbGxlciIsIiRpbmplY3QiLCJmd0Jhbm5lciIsInNjb3BlIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyQXMiLCJkaXJlY3RpdmUiLCJhZGRJdGVtIiwibm90aWZpY2F0aW9uQXJyIiwiaSIsImxlbiIsIm5vdGlmaWNhdGlvbkNoZWNrIiwibm90aWZpY2F0aW9uUXVldWUiLCJwdXNoIiwic2hpZnQiLCJub3RpZmljYXRpb24iLCJzZXJ2aWNlIiwiZmFjdG9yeSIsImZ3QnJlYWRDcnVtYnMiLCJCcmVhZGNydW1ic1NlcnZpY2UiLCJ4MVV0aWxzIiwiU2lkZU5hdkNvbnN0YW50cyIsImxpbmtGdW5jIiwiZGF0YSIsImJyZWFkY3J1bWJzIiwiZ2VuZXJhdGVDcnVtYnMiLCJjdXJyZW50Iiwic2lkZU5hdkxpc3RlbmVyIiwiRVZFTlRTIiwic2lkZU5hdkl0ZW1DbGlja2VkIiwic3RhdGVDb25maWciLCJwYXJlbnRNZW51IiwicmVzZXRTdGF0ZXMiLCJnZXREaXNwbGF5TmFtZSIsImJyZWFkY3J1bWIiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJ0cmFuc2xhdGVkTmFtZSIsInRyYW5zbGF0ZSIsImNoYW5nZVN0YXRlIiwidGFyZ2V0U3RhdGUiLCJnbyIsInBhcmFtcyIsImxpbmsiLCJicmVhZGNydW1ic1NlcnZpY2UiLCJ0YXJnZXRQYXJlbnRTdGF0ZSIsInN0YXRlTGlzdCIsImN1cnJlbnRTdGF0ZSIsInN0b3JlU3RhdGVzIiwiY3J1bWJzQXJyYXkiLCJzZXRTdGF0ZSIsIm5leHRPYmoiLCJoYXNQYXJlbnQiLCJuZXh0U3RhdGUiLCJ1bnNoaWZ0IiwiZ2V0UGFyZW50Iiwic3RhdGUiLCJpbkFyciIsImFycmF5Q2hlY2siLCJzcGxpY2UiLCJzdGF0ZVNldHRpbmdzIiwiaGFzT3duUHJvcGVydHkiLCJwYXJlbnRTdGF0ZXMiLCJwYXJlbnRzIiwidmlzaXRlZCIsImNob3Nlbk9uZSIsIm1hdGNoSW5kZXgiLCJnZXRIaWdoZXN0VmFsIiwiZ2V0IiwiYmFja2ZpbGxTdGF0ZXMiLCJzdGF0ZXNQYXJlbnQiLCJhcnIiLCJNYXRoIiwibWF4IiwiYXBwbHkiLCJzdGF0ZU5hbWUiLCJtYXRjaCIsInRhcmdldFN0YXRlTmFtZSIsImluc2VydFN0YXRlIiwidGFyZ2V0SW5kZXgiLCIkaHR0cCIsIiRxIiwiJGxvZyIsImRvTG9nb3V0IiwiZGVmZXJyZWQiLCJkZWZlciIsInBvc3QiLCJ0aGVuIiwicmVzdWx0IiwiZGVidWciLCJyZXNvbHZlIiwiZXJyb3IiLCJyZWplY3QiLCJwcm9taXNlIiwiT3JnU3dpdGNoQ29udHJvbGxlciIsImZyYW1ld29ya0hvbWVTcnYiLCJvcmlnaW5hbE9yZ0lkIiwic2hvd0xvYWRpbmciLCJvcmdBcnJheSIsInNlbGVjdGVkT3JnIiwiZ2V0T3JncyIsInJlc3AiLCJ1c2VyRGF0YSIsImdldFVzZXIiLCJvcmdJZCIsInNlbGVjdGVkIiwic2VsZWN0T3JnIiwib3JnIiwiJHBhcmVudCIsIm9wdGlvbnMiLCJhY3Rpb25EaXNhYmxlZCIsInN1Yk5hdldpZGdldHNTZXJ2aWNlIiwic2V0VmlzaWJpbGl0eSIsIndpZGdldHMiLCJ3IiwidmFsaWRTdGF0ZXMiLCJtYWtlVmlzaWJsZSIsImluQXJyYXkiLCJzdGF0ZXMiLCJleGlzdHMiLCJpbmNsdWRlcyIsImZ3VG9wTGV2ZWwiLCIkY29tcGlsZSIsImVsZW1lbnQiLCJyZXBsYWNlV2l0aCIsInRlbXBsYXRlIiwiJHgxcG9wb3ZlciIsInRvcE1hY3JvTWVudVBvcG92ZXIiLCJwbGFjZW1lbnQiLCJ0cmlnZ2VyIiwiY29udGVudFRlbXBsYXRlIiwib3V0c2lkZUNsaWNrIiwidG9wTWFjcm9NZW51U2VydmljZSIsImdldE1hY3JvTWVudUl0ZW1zIiwibWFjcm9NZW51SXRlbXNSZXN1bHQiLCJuYXZJdGVtcyIsIml0ZW1zIiwiZG9Ub3BNYWNyb01lbnUiLCJ0b2dnbGVUb3BNYWNyb01lbnUiLCJwYXNzRGF0YVRvVG9wTWFjcm9NZW51UG9wb3ZlciIsInNob3dPckhpZGVUb3BNYWNyb01lbnUiLCJtYWNyb01lbnVDb2x1bW5MaW1pdCIsImdvVG9VcmwiLCJpdGVtU3RhdGUiLCJpc1RvcE1hY3JvTWVudU9wZW4iLCJoaWRlVG9wTWFjcm9NZW51IiwibWFjcm9NZW51Q29sdW1uV2lkdGgiLCJwb3BPdmVyTmF2SXRlbXMiLCJzaG93VG9wTWFjcm9NZW51IiwiaGFtYnVyZ2VyU3RhdGUiLCIkaGlkZSIsIiRzaG93IiwicHJvdmlkZXIiLCIkc3RhdGVQcm92aWRlciIsIiRnZXQiLCJhZGRTdGF0ZSIsInVybCIsImR1bW15TGluayIsIlN1Yk5hdldpZGdldHNTZXJ2aWNlIiwiJHdpbmRvdyIsInBvcG92ZXJFdmVudCIsImxvZ291dFNydiIsIngxTW9kYWwiLCJpbml0U3ViTmF2IiwiZ2V0U2Vjb25kYXJ5TGV2ZWwiLCJpc1NpZGVOYXZPcGVuIiwidG9wTWFjcm9NZW51T3B0aW9uIiwiZ2V0TmF2SXRlbXMiLCJ0b3BMZXZlbCIsImdldFRvcExldmVsIiwic3ViTmF2V2lkZ2V0cyIsInN0YXRlTGlzdGVuZXIiLCJwcm9kdWN0VGl0bGUiLCJnZXRQcm9kdWN0VGl0bGUiLCJzaG93QmV0YUJhZGdlIiwiZ2V0U2hvd0JldGFCYWRnZSIsInZlcnNpb24iLCJ1c2VyIiwidG9nZ2xlTWVudSIsIiRlbWl0IiwibG9nb3V0IiwiQ0FOQ0VMX1BPUE9WRVIiLCJvcGVuIiwiZ2V0SGVscEl0ZW1zIiwic3dpdGNoT3JnIiwiaGFuZGxlciIsImdldE9yZ0NhbGxiYWNrIiwib3JnTW9kYWwiLCJoZWFkZXJUZXh0Iiwic2hvd0Nsb3NlQnV0dG9uIiwiYWN0aW9uQnV0dG9uVGV4dCIsInNldHRpbmdzIiwic2l6ZSIsInNob3ciLCJzZW5kU2VsZWN0ZWQiLCJnZXRTZWxlY3RlZE9yZ0NhbGxiYWNrIiwibmF2TGlzdGVuZXIiLCJ0b3BOYXZMaXN0ZW5lciIsInRvcG5hdkl0ZW1zIiwic3ViTmF2TGlzdGVuZXIiLCJzdWJuYXZJdGVtcyIsImZyYW1ld29ya0NyZWF0ZVN0YXRlcyIsImNyZWF0ZVN0YXRlcyIsImVuc3VyZURlZmluZWQiLCJkYXNoYm9hcmRzTWVudSIsImFuYWx5emVNZW51IiwiY3JlYXRlTWVudSIsIm1hbmFnZU1lbnUiLCJhZG1pbk1lbnUiLCJsaW1pdGVkTWVudSIsImhlbHBJdGVtcyIsImZpcnN0TmFtZSIsIm9yZ0NhbGxCYWNrIiwic2VsZWN0ZWRDYWxsQmFjayIsInNldFRyYW5zbGF0ZWRNZW51SGVhZGVyTGFiZWxzIiwibmF2SGVhZGVyVHJhbnNsYXRpb25zUGFzc2VkIiwiZGFzaGJvYXJkc1RpdGxlIiwiYW5hbHl6ZVRpdGxlIiwiY3JlYXRlVGl0bGUiLCJtYW5hZ2VUaXRsZSIsImFkbWluVGl0bGUiLCJsaW1pdGVkVGl0bGUiLCJoZWFkZXIiLCJpZCIsImNsYXNzIiwiaWNvbiIsImlzT3BlbiIsImFjdGl2ZSIsInNlY29uZGFyeUxldmVsIiwic2V0VXNlciIsInVzZXJPYmplY3QiLCJleHRlbmQiLCJhZGRUb0ZyYW1ld29yayIsIm1lbnVHcm91cCIsIm1lbnUiLCJjb25jYXQiLCJnZXREYXNoYm9hcmRzTWVudSIsImdldEFuYWx5emVNZW51IiwiZ2V0Q3JlYXRlTWVudSIsImdldE1hbmFnZU1lbnUiLCJnZXRBZG1pbk1lbnUiLCJnZXRMaW1pdGVkTWVudSIsImFkZFRvVG9wTmF2IiwibmV3SXRlbXMiLCJhZGRUb1N1Yk5hdiIsInNldFByb2R1Y3RUaXRsZSIsInRpdGxlIiwic2V0U2hvd0JldGFCYWRnZSIsImFkZEhlbHBJdGVtIiwiZGlzcGxheVRpdGxlIiwiY2FsbGJhY2siLCJoYW5kbGVDbGljayIsInNldE9yZ0NhbGxiYWNrIiwic2V0U2VsZWN0ZWRPcmdDYWxsYmFjayIsIiR0ZW1wbGF0ZUNhY2hlIiwicHV0Il0sIm1hcHBpbmdzIjoiQUFZQUEsUUFBUUMsT0FBTyxtQkFDZCxhQUNBLHlCQUNBLGVBQ0EsWUFDQSxpQkFDQSxhQUNBLGNB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QUFrQixTQUFTNlMsZ0JBQ3JDQSxlQUFlQyxJQUFJLDhCQUNqQjtDQ1JKLFNBQVUzVSxRQUNWLElBQ0VBLE9BQVNELFFBQVFDLE9BQU8sbUJBQ3hCLE1BQU91RSxHQUNQdkUsT0FBU0QsUUFBUUMsT0FBTyxzQkFFMUJBLE9BQU82QixLQUFLLGlCQUFrQixTQUFTNlMsZ0JBQ3JDQSxlQUFlQyxJQUFJLDZCQUNqQjtDQ1JKLFNBQVUzVSxRQUNWLElBQ0VBLE9BQVNELFFBQVFDLE9BQU8sbUJBQ3hCLE1BQU91RSxHQUNQdkUsT0FBU0QsUUFBUUMsT0FBTyxzQkFFMUJBLE9BQU82QixLQUFLLGlCQUFrQixTQUFTNlMsZ0JBQ3JDQSxlQUFlQyxJQUFJLDJCQUNqQiIsImZpbGUiOiJ4MS11aS1uZy1mcmFtZXdvcmsubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogTGljZW5zZWQgTWF0ZXJpYWxzIC0gUHJvcGVydHkgb2YgSUJNXG4gKlxuICogZnJhbWV3b3JrLm1vZHVsZS5qc1xuICpcbiAqIChDKSBDb3B5cmlnaHQgSUJNIENvcnBvcmF0aW9uIDIwMTYuXG4gKiBVLlMuIEdvdmVybm1lbnQgVXNlcnMgUmVzdHJpY3RlZCBSaWdodHM6ICBVc2UsIGR1cGxpY2F0aW9uIG9yIGRpc2Nsb3N1cmVcbiAqIHJlc3RyaWN0ZWQgYnkgR1NBIEFEUCBTY2hlZHVsZSBDb250cmFjdCB3aXRoIElCTSBDb3JwLlxuICpcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZShcIngxLnVpLmZyYW1ld29ya1wiLCBbXG5cdFwibmdTYW5pdGl6ZVwiLFxuXHRcInBhc2NhbHByZWNodC50cmFuc2xhdGVcIixcblx0XCJ1aS5ib290c3RyYXBcIixcblx0XCJ1aS5yb3V0ZXJcIixcblx0XCJmcmFtZXdvcmstaG9tZVwiLFxuXHRcIm1hY3JvLW1lbnVcIixcblx0XCJ4MS51aS51dGlsc1wiLFxuXHRcIngxLnVpLnRvcC1uYXZpZ2F0aW9uXCIsXG5cdFwieDEudWkuc2lkZS1uYXZpZ2F0aW9uXCIsXG5cdFwieDEudWkubG9hZGluZy1iZWVcIlxuXSk7IiwiLyoqXG4gKlxuICogTGljZW5zZWQgTWF0ZXJpYWxzIOKAkyBQcm9wZXJ0eSBvZiBJQk1cbiAqXG4gKiBtYWNyby1tZW51Lm1vZHVsZS5qc1xuICpcbiAqIChDKSBDb3B5cmlnaHQgSUJNIENvcnBvcmF0aW9uIDIwMTYuXG4gKiBVLlMuIEdvdmVybm1lbnQgVXNlcnMgUmVzdHJpY3RlZCBSaWdodHM6ICBVc2UsIGR1cGxpY2F0aW9uIG9yIGRpc2Nsb3N1cmVcbiAqIHJlc3RyaWN0ZWQgYnkgR1NBIEFEUCBTY2hlZHVsZSBDb250cmFjdCB3aXRoIElCTSBDb3JwLlxuICpcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZShcIm1hY3JvLW1lbnVcIiwgW1wieDEudWkudG9vbHRpcFwiLFxuICAgIFwieDEudWkucG9wb3ZlclwiXSk7IiwiLyoqXG4gKlxuICogTGljZW5zZWQgTWF0ZXJpYWxzIOKAkyBQcm9wZXJ0eSBvZiBJQk1cbiAqXG4gKiBmcmFtZXdvcmstaG9tZS5tb2R1bGUuanNcbiAqXG4gKiAoQykgQ29weXJpZ2h0IElCTSBDb3Jwb3JhdGlvbiAyMDE2LlxuICogVS5TLiBHb3Zlcm5tZW50IFVzZXJzIFJlc3RyaWN0ZWQgUmlnaHRzOiAgVXNlLCBkdXBsaWNhdGlvbiBvciBkaXNjbG9zdXJlXG4gKiByZXN0cmljdGVkIGJ5IEdTQSBBRFAgU2NoZWR1bGUgQ29udHJhY3Qgd2l0aCBJQk0gQ29ycC5cbiAqXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoXCJmcmFtZXdvcmstaG9tZVwiLCBbXCJ4MS51aS50b29sdGlwXCIsIFwieDEudWkucG9wb3ZlclwiLFx0XCJ4MS51aS5tb2RhbFwiXSk7IiwiLyoqXG4gKlxuICogTGljZW5zZWQgTWF0ZXJpYWxzIC0gUHJvcGVydHkgb2YgSUJNXG4gKlxuICogZnJhbWV3b3JrLmNvbmZpZy5qc1xuICpcbiAqIChDKSBDb3B5cmlnaHQgSUJNIENvcnBvcmF0aW9uIDIwMTYuXG4gKiBVLlMuIEdvdmVybm1lbnQgVXNlcnMgUmVzdHJpY3RlZCBSaWdodHM6ICBVc2UsIGR1cGxpY2F0aW9uIG9yIGRpc2Nsb3N1cmVcbiAqIHJlc3RyaWN0ZWQgYnkgR1NBIEFEUCBTY2hlZHVsZSBDb250cmFjdCB3aXRoIElCTSBDb3JwLlxuICpcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZShcIngxLnVpLmZyYW1ld29ya1wiKVxuXHQuY29uZmlnKFtcblx0XHRcIiR1cmxSb3V0ZXJQcm92aWRlclwiLCBcIiR0cmFuc2xhdGVQcm92aWRlclwiLFxuXHRcdGZ1bmN0aW9uICgkdXJsUm91dGVyUHJvdmlkZXIsICR0cmFuc2xhdGVQcm92aWRlcikge1xuXHRcdFx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0XHRcdCR1cmxSb3V0ZXJQcm92aWRlclxuXHRcdFx0XHQub3RoZXJ3aXNlKFwiL1wiKTtcblxuXHRcdFx0JHRyYW5zbGF0ZVByb3ZpZGVyLmZhbGxiYWNrTGFuZ3VhZ2UoXCJlbl9VU1wiKTtcblxuXHRcdFx0Ly8gUmVnaXN0ZXIgYSBsb2FkZXIgZm9yIHRoZSBzdGF0aWMgZmlsZXNcblx0XHRcdC8vIFNvLCB0aGUgbW9kdWxlIHdpbGwgc2VhcmNoIG1pc3NpbmcgdHJhbnNsYXRpb24gdGFibGVzIHVuZGVyIHRoZSBzcGVjaWZpZWQgdXJscy5cblx0XHRcdC8vIFRob3NlIHVybHMgYXJlIFtwcmVmaXhdW2xhbmdLZXldW3N1ZmZpeF0uXG5cdFx0XHQkdHJhbnNsYXRlUHJvdmlkZXIudXNlU3RhdGljRmlsZXNMb2FkZXIoe1xuXHRcdFx0XHRwcmVmaXg6IFwibDEwbi9cIixcblx0XHRcdFx0c3VmZml4OiBcIi5qc29uXCJcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBUZWxsIHRoZSBtb2R1bGUgd2hhdCBsYW5ndWFnZSB0byB1c2UgYnkgZGVmYXVsdFxuXHRcdFx0JHRyYW5zbGF0ZVByb3ZpZGVyLnByZWZlcnJlZExhbmd1YWdlKFwiZW5fVVNcIik7XG5cblx0XHRcdC8vY2hlY2sgZm9yIGluc2VydGVkIEhUTUwgYmVmb3JlIGF0dGVtcHRpbmcgdG8gcmVzb2x2ZSB0cmFuc2xhdGlvbiB2YXJpYWJsZXNcblx0XHRcdC8vdG8gcHJvdGVjdCB1cyBmcm9tIHBvdGVudGlhbCBpbnNlcnRpb24gYXR0YWNrcy5cblx0XHRcdCR0cmFuc2xhdGVQcm92aWRlci51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3koXCJlc2NhcGVkXCIpO1xuXG5cdFx0fV0pOyIsIi8qKlxuICpcbiAqIExpY2Vuc2VkIE1hdGVyaWFscyDigJMgUHJvcGVydHkgb2YgSUJNXG4gKlxuICogZnJhbWV3b3JrLmNvbnN0YW50cy5qc1xuICpcbiAqIChDKSBDb3B5cmlnaHQgSUJNIENvcnBvcmF0aW9uIDIwMTYuXG4gKiBVLlMuIEdvdmVybm1lbnQgVXNlcnMgUmVzdHJpY3RlZCBSaWdodHM6ICBVc2UsIGR1cGxpY2F0aW9uIG9yIGRpc2Nsb3N1cmVcbiAqIHJlc3RyaWN0ZWQgYnkgR1NBIEFEUCBTY2hlZHVsZSBDb250cmFjdCB3aXRoIElCTSBDb3JwLlxuICpcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZShcIngxLnVpLmZyYW1ld29ya1wiKVxuXHQuY29uc3RhbnQoXCJmcmFtZXdvcmtDb25zdGFudHNcIiwge1xuXHRcdFwiTkFWX01FTlVcIjoge1xuXHRcdFx0XCJEQVNIQk9BUkRTXCI6IFwiRlc6RGFzaGJvYXJkc1wiLFxuXHRcdFx0XCJBTkFMWVpFXCI6IFwiRlc6QW5hbHl6ZVwiLFxuXHRcdFx0XCJDUkVBVEVcIjogXCJGVzpDcmVhdGVcIixcblx0XHRcdFwiTUFOQUdFXCI6IFwiRlc6TWFuYWdlXCIsXG5cdFx0XHRcIkFETUlOXCI6IFwiRlc6QWRtaW5cIixcblx0XHRcdFwiTElNSVRFRF9BVkFJTEFCSUxJVFlcIjogXCJGVzpMaW1pdGVkX0F2YWlsYWJpbGl0eVwiXG5cdFx0fSxcblx0XHRcIk5PVF9PTl9NRU5VXCI6IFwiRlc6bm90X29uX21lbnVcIixcblx0XHRcIk5BVl9TVEFURVNcIjoge1xuXHRcdFx0XCJIT01FXCI6IFwiZnJhbWV3b3JrSG9tZVwiLFxuXHRcdFx0XCJEQVNIQk9BUkRTXCI6IFwiZnJhbWV3b3JrSG9tZS5kYXNoYm9hcmRzXCIsXG5cdFx0XHRcIkFOQUxZWkVcIjogXCJmcmFtZXdvcmtIb21lLmFuYWx5emVcIixcblx0XHRcdFwiQ1JFQVRFXCI6IFwiZnJhbWV3b3JrSG9tZS5jcmVhdGVcIixcblx0XHRcdFwiTUFOQUdFXCI6IFwiZnJhbWV3b3JrSG9tZS5tYW5hZ2VcIixcblx0XHRcdFwiQURNSU5cIjogXCJmcmFtZXdvcmtIb21lLmFkbWluXCIsXG5cdFx0XHRcIkxJTUlURURfQVZBSUxBQklMSVRZXCI6IFwiZnJhbWV3b3JrSG9tZS5saW1pdGVkXCJcblx0XHR9LFxuXHRcdFwiRXZlbnRzXCI6IHtcblx0XHRcdFwiVE9QX01BQ1JPX01FTlVfQ0hBTkdFRFwiOiBcImZyYW1ld29yay50b3BNYWNyb01lbnVDaGFuZ2VkXCIsXG5cdFx0XHRcIlNIT1dfQkFOTkVSXCI6IFwiZnJhbWV3b3JrOnNob3dCYW5uZXJcIixcblx0XHRcdFwiQkFOTkVSX0NMSUNLRURcIjogXCJmcmFtZXdvcms6YmFubmVyQ2xpY2tcIixcblx0XHRcdFwiTkFWX0lURU1TX1VQREFURURcIjogXCJmcmFtZXdvcms6bmF2SXRlbXNVcGRhdGVkXCIsXG5cdFx0XHRcIlRPUF9OQVZfSVRFTVNfVVBEQVRFRFwiOiBcImZyYW1ld29yazp0b3BOYXZJdGVtc1VwZGF0ZWRcIixcblx0XHRcdFwiU1VCX05BVl9JVEVNU19VUERBVEVEXCI6IFwiZnJhbWV3b3JrOnN1Yk5hdkl0ZW1zVXBkYXRlZFwiXG5cdFx0fVxuXHR9KTsiLCIvKipcbiAqXG4gKiBMaWNlbnNlZCBNYXRlcmlhbHMgLSBQcm9wZXJ0eSBvZiBJQk1cbiAqXG4gKiBmcmFtZXdvcmsucnVuLmpzXG4gKlxuICogKEMpIENvcHlyaWdodCBJQk0gQ29ycG9yYXRpb24gMjAxNi5cbiAqIFUuUy4gR292ZXJubWVudCBVc2VycyBSZXN0cmljdGVkIFJpZ2h0czogIFVzZSwgZHVwbGljYXRpb24gb3IgZGlzY2xvc3VyZVxuICogcmVzdHJpY3RlZCBieSBHU0EgQURQIFNjaGVkdWxlIENvbnRyYWN0IHdpdGggSUJNIENvcnAuXG4gKlxuICovXG5cblxuYW5ndWxhci5tb2R1bGUoXCJ4MS51aS5mcmFtZXdvcmtcIilcblx0LnJ1bihbXG5cdFx0XCIkcm9vdFNjb3BlXCIsXG5cdFx0XCIkc3RhdGVcIixcblx0XHRmdW5jdGlvbigkcm9vdFNjb3BlLFxuXHRcdFx0XHQgJHN0YXRlXG5cdFx0KSB7XG5cdFx0XHRcInVzZSBzdHJpY3RcIjtcblxuXHRcdFx0JHJvb3RTY29wZS4kb24oXCIkc3RhdGVDaGFuZ2VTdWNjZXNzXCIsIGZ1bmN0aW9uKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zKSB7XG5cdFx0XHRcdCRzdGF0ZS5wcmV2aW91c1N0YXRlID0gZnJvbVN0YXRlO1xuXHRcdFx0XHQkc3RhdGUucHJldmlvdXNQYXJhbXMgPSBmcm9tUGFyYW1zO1xuXHRcdFx0fSk7XG5cdFx0fV0pOyIsIihmdW5jdGlvbigpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoXCJ4MS51aS5mcmFtZXdvcmtcIilcblx0XHQuY29udHJvbGxlcihcIkJhbm5lckNvbnRyb2xsZXJcIiwgQmFubmVyQ29udHJvbGxlcik7XG5cbiAgICAgICAgQmFubmVyQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAgICAgICBcdFwiJHJvb3RTY29wZVwiLFxuICAgICAgICBcdFwiJHRpbWVvdXRcIixcbiAgICAgICAgXHRcIiRzY29wZVwiLFxuICAgICAgICBcdFwiQmFubmVyU2VydmljZVwiLFxuXHQgICAgICAgIFwiZnJhbWV3b3JrQ29uc3RhbnRzXCJcbiAgICAgICAgXTtcblxuICAgICAgICBmdW5jdGlvbiBCYW5uZXJDb250cm9sbGVyKCRyb290U2NvcGUsICR0aW1lb3V0LCAkc2NvcGUsIEJhbm5lclNlcnZpY2UsIGZyYW1ld29ya0NvbnN0YW50cykge1xuICAgICAgICBcdHZhciB2bSA9IHRoaXM7XG4gICAgICAgIFx0dmFyIGJhbm5lclRpbWVvdXQ7XG5cdFx0XHR2YXIgYW5pbWF0aW9uVGltZW91dDtcblx0XHRcdHZhciBuZXh0QmFubmVyID0gbnVsbDtcblxuXHRcdFx0dmFyIG5vdGlmaWNhdGlvbkxpc3RlbmVyID0gJHJvb3RTY29wZS4kb24oZnJhbWV3b3JrQ29uc3RhbnRzLkV2ZW50cy5TSE9XX0JBTk5FUiwgZnVuY3Rpb24oZSwgZURhdGEpIHtcblx0XHRcdFx0c2V0VXBCYW5uZXIoZURhdGEpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHZtLmJhbm5lclZpc2libGUgPSBmYWxzZTtcblx0XHRcdHZtLmJhbm5lckNsYXNzID0gXCJiZy1pbmZvXCI7XG5cdFx0XHR2bS5iYW5uZXIgPSB7fTtcblxuXHRcdFx0Ly9iaW5kYWJsZSBmdW5jdGlvbnNcblx0XHRcdHZtLnRvZ2dsZUJhbm5lciA9IHRvZ2dsZUJhbm5lcjtcblx0XHRcdHZtLml0ZW1DbGlja2VkID0gaXRlbUNsaWNrZWQ7XG5cblx0XHRcdC8qKlxuXHRcdFx0KiBCcm9hZGNhc3QgYmFubmVyIGNsaWNrIGV2ZW50IGZvciBjaGlsZCBhcHBzXG5cdFx0XHQqIEBwYXJhbSBDYW4gYmUgd2hhdGV2ZXIgY2hpbGQgYXBwIG5lZWRzXG5cdFx0XHQqL1xuXHRcdFx0ZnVuY3Rpb24gaXRlbUNsaWNrZWQoaXRlbSl7XG5cdFx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdChmcmFtZXdvcmtDb25zdGFudHMuRXZlbnRzLkJBTk5FUl9DTElDS0VELCBpdGVtKTtcblx0XHRcdFx0dG9nZ2xlQmFubmVyKGZhbHNlKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQqIEhhbmRsZXMgYmFubmVyIHZpc2libGl0eSBhbmQgYW5pbWF0aW9uIHRpbWVvdXRzXG5cdFx0XHQqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsIFNob3cgb3IgaGlkZSBiYW5uZXJcblx0XHRcdCovXG5cdFx0XHRmdW5jdGlvbiB0b2dnbGVCYW5uZXIodmFsKSB7XG5cdFx0XHRcdGlmKHZhbCAmJiB2bS5iYW5uZXJWaXNpYmxlKSB7XG5cdFx0XHRcdFx0aWYoYmFubmVyVGltZW91dCkge1xuXHRcdFx0XHRcdFx0JHRpbWVvdXQuY2FuY2VsKGJhbm5lclRpbWVvdXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRoaWRlQmFubmVyKCk7XG5cdFx0XHRcdFx0aWYoYW5pbWF0aW9uVGltZW91dCkge1xuXHRcdFx0XHRcdFx0JHRpbWVvdXQuY2FuY2VsKGFuaW1hdGlvblRpbWVvdXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRhbmltYXRpb25UaW1lb3V0ID0gJHRpbWVvdXQoc2hvd0Jhbm5lciwgNTAwKTtcblx0XHRcdFx0fSBlbHNlIGlmKCF2YWwgJiYgdm0uYmFubmVyVmlzaWJsZSkge1xuXHRcdFx0XHRcdGlmKGJhbm5lclRpbWVvdXQpIHtcblx0XHRcdFx0XHRcdCR0aW1lb3V0LmNhbmNlbChiYW5uZXJUaW1lb3V0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aGlkZUJhbm5lcih0cnVlKTtcblx0XHRcdFx0fSBlbHNlIGlmKHZhbCAmJiAhdm0uYmFubmVyVmlzaWJsZSkge1xuXHRcdFx0XHRcdHNob3dCYW5uZXIoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQqIEhpZGUgYmFubmVyLCByZW1vdmUgbGFzdCBzaG93biBpdGVtIGZyb20gcXVldWUsIGFuZCBzZWUgaWYgYW5vdGhlciBuZWVkcyB0byBiZSBzaG93blxuXHRcdFx0KiBAcGFyYW0ge0Jvb2xlYW59IGNoZWNrIE9wdGlvbmFsIGJvb2xlYW4gdG8gZmxhZyB3aGV0aGVyIHRvIHNraXAgYmFubmVyQ2hlY2sgY2FsbFxuXHRcdFx0Ki9cblx0XHRcdGZ1bmN0aW9uIGhpZGVCYW5uZXIoY2hlY2spIHtcblx0XHRcdFx0dm0uYmFubmVyVmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0XHRCYW5uZXJTZXJ2aWNlLnVwZGF0ZVF1ZXVlKGZhbHNlKTtcblx0XHRcdFx0dm0uYmFubmVyID0ge307XG5cdFx0XHRcdGlmKGNoZWNrKSB7XG5cdFx0XHRcdFx0YmFubmVyQ2hlY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCogUXVldWUgdXAgbm90aWZpY2F0aW9uIGFuZCBzdGFydCBwcm9jZXNzIGlmIG5vdCBhbHJlYWR5IHN0YXJ0ZWRcblx0XHRcdCogQHBhcmFtIHtBcnJheX0gbm90aWZpY2F0aW9ucyBBcnJheSBvZiBub3RpZmljYXRpb24gb2JqZWN0c1xuXHRcdFx0KiBTYW1wbGUgbm90aWZpY2F0aW9uT2JqID0ge1xuXHRcdFx0Klx0dHlwZTogJ2JnLWluZm8nLCAtcmVxdWlyZWQtXG5cdFx0XHQqXHRtZXNzYWdlOiAnRGlzcGxheWVkIHRleHQnLCAtbm90IHJlcXVpcmVkLSBidXQgbm90aGluZyB3aWxsIGJlIGRpc3BsYXllZFxuXHRcdFx0Klx0bGlua1RleHQ6ICdEaXNwbGF5ZWQgbGluaycsIC1ub3QgcmVxdWlyZWQtIGJ1dCBub3RoaW5nIHdpbGwgYmUgZGlzcGxheWVkXG5cdFx0XHQqXHRcdFx0XHRcdFx0XHRcdENsaWNrIGZ1bmN0aW9uYWxpdHkgZGV0ZXJtaW5lZCBieSBjaGlsZCBhcHAuXG5cdFx0XHQqXHRvcHRpb25hbFByb3BlcnRpZXM6IChhbnl0aGluZyB0aGF0IHRoZSBjaGlsZCBhcHAgbWF5IHdhbnQgcGFzc2VkIGJhY2sgXG5cdFx0XHQqXHRcdFx0XHRcdFx0cHJvcGVydHkgbmFtZSBpcyBqdXN0IGFuIGV4YW1wbGUpXG5cdFx0XHQqIH1cblx0XHRcdCovXG5cdFx0XHRmdW5jdGlvbiBzZXRVcEJhbm5lcihub3RpZmljYXRpb25zKSB7XG5cdFx0XHRcdEJhbm5lclNlcnZpY2UudXBkYXRlUXVldWUodHJ1ZSwgbm90aWZpY2F0aW9ucyk7XG5cdFx0XHRcdC8vaWYgd2UgZG9udCB3YW50IG5ldyBub3RpZmljYXRpb24gdG8gcmVwbGFjZSBjdXJyZW50IG9uZSwgYWRkIGxvZ2ljIGhlcmVcblx0XHRcdFx0YmFubmVyQ2hlY2soKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQqIENoZWNrIG5vdGlmaWNhdGlvbiBxdWV1ZSBhbmQgc2hvdyBmaXJzdCBpdGVtIGlmIHF1ZXVlIGV4aXN0c1xuXHRcdFx0Ki9cblx0XHRcdGZ1bmN0aW9uIGJhbm5lckNoZWNrKCkge1xuXHRcdFx0XHR2YXIgbm90aWZpY2F0aW9ucyA9IEJhbm5lclNlcnZpY2UuZ2V0UXVldWUoKTtcblx0XHRcdFx0dmFyIGlzQ3VycmVudCA9IGFuZ3VsYXIuZXF1YWxzKHZtLmJhbm5lciwgbm90aWZpY2F0aW9uc1swXSk7XG5cdFx0XHRcdC8vZG9udCBzaG93IHNhbWUgbm90aWZpY2F0aW9uIGFnYWluXG5cdFx0XHRcdGlmKG5vdGlmaWNhdGlvbnMubGVuZ3RoID4gMCAmJiAhaXNDdXJyZW50KSB7XG5cdFx0XHRcdFx0bmV4dEJhbm5lciA9IGFuZ3VsYXIuY29weShub3RpZmljYXRpb25zWzBdKTtcblx0XHRcdFx0XHQkdGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHZtLnRvZ2dsZUJhbm5lcih0cnVlKTtcblx0XHRcdFx0XHR9LCAwKTtcblx0XHRcdFx0fSBlbHNlIGlmKG5vdGlmaWNhdGlvbnMubGVuZ3RoID4gMSAmJiBpc0N1cnJlbnQpIHtcblx0XHRcdFx0XHRuZXh0QmFubmVyID0gYW5ndWxhci5jb3B5KG5vdGlmaWNhdGlvbnNbMV0pO1xuXHRcdFx0XHRcdCR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0dm0udG9nZ2xlQmFubmVyKHRydWUpO1xuXHRcdFx0XHRcdH0sIDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCogU2hvdyBiYW5uZXIgYW5kIGJlZ2luIHRpbWVvdXQgdG8gaGlkZVxuXHRcdFx0Ki9cblx0XHRcdGZ1bmN0aW9uIHNob3dCYW5uZXIoKSB7XG5cdFx0XHRcdHZtLmJhbm5lciA9IG5leHRCYW5uZXI7XG5cdFx0XHRcdHZtLmJhbm5lclZpc2libGUgPSB0cnVlO1xuXHRcdFx0XHRiYW5uZXJUaW1lb3V0ID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aGlkZUJhbm5lcih0cnVlKTtcblx0XHRcdFx0fSwgMTAwMDApO1xuXHRcdFx0fVxuXG5cdFx0XHQkc2NvcGUuJG9uKFwiJGRlc3Ryb3lcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG5vdGlmaWNhdGlvbkxpc3RlbmVyKCk7XG5cdFx0XHRcdCR0aW1lb3V0LmNhbmNlbCgpO1xuXHRcdFx0fSk7XG5cblx0XHR9XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKFwieDEudWkuZnJhbWV3b3JrXCIpXG5cdFx0LmRpcmVjdGl2ZShcImZ3QmFubmVyXCIsIGZ3QmFubmVyKTtcblxuXHRcdGZ1bmN0aW9uIGZ3QmFubmVyKCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0c2NvcGU6IHRydWUsXG5cdFx0XHRcdHJlc3RyaWN0OiBcIkVBXCIsXG5cdFx0XHRcdHJlcGxhY2U6IGZhbHNlLFxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogXCJiYW5uZXIvYmFubmVyLmh0bWxcIixcblx0XHRcdFx0Y29udHJvbGxlcjogXCJCYW5uZXJDb250cm9sbGVyXCIsXG5cdFx0XHRcdGNvbnRyb2xsZXJBczogXCJ2bVwiXG5cdFx0XHR9O1xuXHRcdH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZShcIngxLnVpLmZyYW1ld29ya1wiKVxuICAgICAgICAuZmFjdG9yeShcIkJhbm5lclNlcnZpY2VcIiwgQmFubmVyU2VydmljZSk7XG5cbiAgICAgICAgZnVuY3Rpb24gQmFubmVyU2VydmljZSgpIHtcbiAgICAgICAgICAgIHZhciBub3RpZmljYXRpb25RdWV1ZSA9IFtdO1xuXG4gICAgICAgICAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgICAgICAgICAgICB1cGRhdGVRdWV1ZTogdXBkYXRlUXVldWUsXG4gICAgICAgICAgICAgICAgZ2V0UXVldWU6IGdldFF1ZXVlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFNpbXBsZSBub3RpZmljYXRpb24gdHJhY2tpbmdcbiAgICAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBhZGRJdGVtIEFkZCBvciByZW1vdmUgaXRlbSBmcm9tIHF1ZXVlXG4gICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IG5vdGlmaWNhdGlvbkFyciBBcnJheSBvZiBub3RpZmlhY3Rpb24gb2JqZWN0cyB0byBiZSBhZGRlZFxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVF1ZXVlKGFkZEl0ZW0sIG5vdGlmaWNhdGlvbkFycikge1xuICAgICAgICAgICAgICAgIGlmKGFkZEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgbGVuID0gbm90aWZpY2F0aW9uQXJyLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZighbm90aWZpY2F0aW9uQ2hlY2sobm90aWZpY2F0aW9uQXJyW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblF1ZXVlLnB1c2gobm90aWZpY2F0aW9uQXJyW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKG5vdGlmaWNhdGlvblF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFF1ZXVlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub3RpZmljYXRpb25RdWV1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFByZXZlbnQgZHVwbGljYXRpb24gbm90aWZpY2F0aW9uc1xuICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gbm90aWZpY2F0aW9uXG4gICAgICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gbm90aWZpY2F0aW9uQ2hlY2sobm90aWZpY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgbGVuID0gbm90aWZpY2F0aW9uUXVldWUubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoYW5ndWxhci5lcXVhbHMobm90aWZpY2F0aW9uUXVldWVbaV0sIG5vdGlmaWNhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKFwieDEudWkuZnJhbWV3b3JrXCIpXG5cdFx0LmRpcmVjdGl2ZShcImZ3QnJlYWRDcnVtYnNcIiwgZndCcmVhZENydW1icyk7XG5cblx0XHRmd0JyZWFkQ3J1bWJzLiRpbmplY3QgPSBbXG5cdFx0XHRcIiRyb290U2NvcGVcIixcblx0XHRcdFwiJHN0YXRlXCIsXG5cdFx0XHRcIkJyZWFkY3J1bWJzU2VydmljZVwiLFxuXHRcdFx0XCJ4MVV0aWxzXCIsXG5cdFx0XHRcIngxLnVpLnNpZGUtbmF2aWdhdGlvbi5jb25zdGFudFwiXG5cdFx0XTtcblxuXHRcdGZ1bmN0aW9uIGZ3QnJlYWRDcnVtYnMoJHJvb3RTY29wZSwgJHN0YXRlLCBCcmVhZGNydW1ic1NlcnZpY2UsIHgxVXRpbHMsIFNpZGVOYXZDb25zdGFudHMpIHtcblx0XHRcdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0XHRcdHNjb3BlOiBmYWxzZSxcblx0XHRcdFx0cmVzdHJpY3Q6IFwiRUFcIixcblx0XHRcdFx0cmVwbGFjZTogZmFsc2UsXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiBcImJyZWFkY3J1bWJzL2JyZWFkY3J1bWJzLmh0bWxcIixcblx0XHRcdFx0bGluazogbGlua0Z1bmNcblx0XHRcdH07XG5cblx0XHRcdHJldHVybiBkaXJlY3RpdmU7XG5cblx0XHRcdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlKSB7XG5cdFx0XHRcdHNjb3BlLmRhdGEgPSB7fTtcblx0XHRcdFx0c2NvcGUuZGF0YS5icmVhZGNydW1icyA9IEJyZWFkY3J1bWJzU2VydmljZS5nZW5lcmF0ZUNydW1icygkc3RhdGUuY3VycmVudCk7XG5cdFx0XHRcdC8vZW5zdXJlIGJyZWFkY3J1bWJzIGRpc3BsYXkgY29ycmVjdCBwYXRoIGJhc2VkIG9uIHNpZGVuYXYgc2VsZWN0aW9uXG5cdFx0XHRcdHZhciBzaWRlTmF2TGlzdGVuZXIgPSAkcm9vdFNjb3BlLiRvbihTaWRlTmF2Q29uc3RhbnRzLkVWRU5UUy5zaWRlTmF2SXRlbUNsaWNrZWQsIGZ1bmN0aW9uKGUsIGl0ZW0pIHtcblx0XHRcdFx0XHRpZihpdGVtLnN0YXRlQ29uZmlnICYmIGl0ZW0uc3RhdGVDb25maWcuZGF0YSAmJiBpdGVtLnN0YXRlQ29uZmlnLmRhdGEucGFyZW50TWVudSkge1xuXHRcdFx0XHRcdFx0QnJlYWRjcnVtYnNTZXJ2aWNlLnJlc2V0U3RhdGVzKGl0ZW0uc3RhdGVDb25maWcuZGF0YS5wYXJlbnRNZW51KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdC8qKlxuXHRcdFx0XHQgKiBCZXN0IGVmZm9ydCB0byByZXR1cm4gYSB0cmFuc2xhdGVkIHN0cmluZyByYXRoZXIgdGhhbiBhIHJhdyBzdGF0ZSBuYW1lXG5cdFx0XHRcdCAqXG5cdFx0XHRcdCAqIFN0YXRlcyB3aXRoIHRyYW5zbGF0ZWQgbmFtZXMgY2FuIGFzc2lnbiB0aGUgdHJhbnNsYXRlZCBzdHJpbmcgdmFsdWUgdG8gZGF0YS5kaXNwbGF5TmFtZVxuXHRcdFx0XHQgKiBTdGF0ZXMgc2V0dXAgaW4gYSBjb25maWcoKSBibG9jayBjYW4ndCBwcmUtdHJhbnNsYXRlLiBUaGV5IHByb3ZpZGUgdGhlaXIgdHJhbnNsYXRpb24ga2V5IGluIGRhdGEubmFtZVxuXHRcdFx0XHQgKiBAcGFyYW0ge09iamVjdH0gYnJlYWRjcnVtYlxuXHRcdFx0XHQgKiBAcmV0dXJucyB7c3RyaW5nfSB0cmFuc2xhdGVkIHN0YXRlIG5hbWUgKGlmIGF2YWlsYWJsZSkgb3IgcmF3IHN0YXRlIG5hbWVcblx0XHRcdFx0ICovXG5cdFx0XHRcdHNjb3BlLmdldERpc3BsYXlOYW1lID0gZnVuY3Rpb24oYnJlYWRjcnVtYikge1xuXHRcdFx0XHRcdGlmIChicmVhZGNydW1iLmRhdGEgJiYgYnJlYWRjcnVtYi5kYXRhLmRpc3BsYXlOYW1lKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gYnJlYWRjcnVtYi5kYXRhLmRpc3BsYXlOYW1lO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChicmVhZGNydW1iLmRhdGEgJiYgYnJlYWRjcnVtYi5kYXRhLm5hbWUpIHtcblx0XHRcdFx0XHRcdHZhciB0cmFuc2xhdGVkTmFtZSA9IHgxVXRpbHMudHJhbnNsYXRlKGJyZWFkY3J1bWIuZGF0YS5uYW1lKTtcblxuXHRcdFx0XHRcdFx0aWYgKHRyYW5zbGF0ZWROYW1lICE9PSBicmVhZGNydW1iLmRhdGEubmFtZSkge1xuXHRcdFx0XHRcdFx0XHRicmVhZGNydW1iLmRhdGEuZGlzcGxheU5hbWUgPSB0cmFuc2xhdGVkTmFtZTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGJyZWFkY3J1bWIuZGF0YS5kaXNwbGF5TmFtZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBicmVhZGNydW1iLmRhdGEubmFtZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGJyZWFkY3J1bWIubmFtZTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRzY29wZS5jaGFuZ2VTdGF0ZSA9IGZ1bmN0aW9uKHRhcmdldFN0YXRlKSB7XG5cdFx0XHRcdFx0JHN0YXRlLmdvKHRhcmdldFN0YXRlLm5hbWUsICRzdGF0ZS5wYXJhbXMpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHNjb3BlLiRvbihcIiRzdGF0ZUNoYW5nZVN1Y2Nlc3NcIiwgZnVuY3Rpb24oZXZlbnQsIHRvU3RhdGUpIHtcblx0XHRcdFx0XHRzY29wZS5kYXRhLmJyZWFkY3J1bWJzID0gQnJlYWRjcnVtYnNTZXJ2aWNlLmdlbmVyYXRlQ3J1bWJzKHRvU3RhdGUpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRzY29wZS4kb24oXCIkZGVzdHJveVwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRzaWRlTmF2TGlzdGVuZXIoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJ4MS51aS5mcmFtZXdvcmtcIilcbiAgICAgICAgLmZhY3RvcnkoXCJCcmVhZGNydW1ic1NlcnZpY2VcIiwgYnJlYWRjcnVtYnNTZXJ2aWNlKTtcblxuICAgICAgICBicmVhZGNydW1ic1NlcnZpY2UuJGluamVjdCA9IFsgXCIkc3RhdGVcIiBdO1xuXG4gICAgICAgIGZ1bmN0aW9uIGJyZWFkY3J1bWJzU2VydmljZSgkc3RhdGUpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZUxpc3QgPSBbXTtcbiAgICAgICAgICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgICAgICAgICAgIHJlc2V0U3RhdGVzOiByZXNldFN0YXRlcyxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUNydW1iczogZ2VuZXJhdGVDcnVtYnNcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogQ2xlYXIgcHJldmlvdXMgc3RhdGVzIGFuZCBpbnNlcnQgc2lkZW5hdiBwYXJlbnQgc3RhdGUuXG4gICAgICAgICAgICAqIFRoaXMgZW5zdXJlcyB0aGF0IGFueXRpbWUgYW4gaXRlbSBpcyBjbGljayBpbiB0aGUgc2lkZW5hdiwgdGhlXG4gICAgICAgICAgICAqIGJyZWFkY3J1bWJzIHdpbGwgc3RhcnQgd2l0aCB0aGUgcGFyZW50IHN0YXRlID4gY2xpY2tlZCBpdGVtcyBzdGF0ZVxuICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0UGFyZW50U3RhdGVcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNldFN0YXRlcyh0YXJnZXRQYXJlbnRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHN0YXRlTGlzdCA9IFt0YXJnZXRQYXJlbnRTdGF0ZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBVbnNoaWZ0IHJlbGV2YW50IHN0YXRlcyBpbnRvIGFuIGFycmF5LiBSZWxldmFudCBtZWFuaW5nIHN0YXRlcyB0aGF0IHdlcmVcbiAgICAgICAgICAgICogbWFya2VkIGFzIHBhcmVudFN0YXRlcyB0aHJvdWdoIGN1c3RvbSBvYmplY3Qgd2l0aGluIHRoZSBzdGF0ZSBvYmplY3QuXG4gICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjdXJyZW50U3RhdGUgU3RhdGUgb2JqZWN0XG4gICAgICAgICAgICAqIEByZXR1cm4ge0FycmF5fSBjcnVtYnNBcnJheSBBcnJheSBvZiByZWxldmFudCBzdGF0ZXNcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZUNydW1icyhjdXJyZW50U3RhdGUpIHtcbiAgICAgICAgICAgICAgICBzdG9yZVN0YXRlcyhjdXJyZW50U3RhdGUpO1xuICAgICAgICAgICAgICAgIHZhciBjcnVtYnNBcnJheSA9IFtjdXJyZW50U3RhdGVdO1xuICAgICAgICAgICAgICAgIHZhciBzZXRTdGF0ZSA9IGN1cnJlbnRTdGF0ZTtcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0T2JqID0gaGFzUGFyZW50KHNldFN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYobmV4dE9iai5uZXh0U3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNydW1ic0FycmF5LnVuc2hpZnQobmV4dE9iai5uZXh0U3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0U3RhdGUgPSBuZXh0T2JqLm5leHRTdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aGlsZShuZXh0T2JqLmdldFBhcmVudCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY3J1bWJzQXJyYXk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEtlZXAgdHJhY2sgb2YgbGFzdCA1KGZvciBub3cpIHZpc2l0ZWQgc3RhdGVzLiBJZiBzdGF0ZSBpcyBhbHJlYWR5XG4gICAgICAgICAgICAqIGluIGFycmF5IHB1c2ggaXQgdG8gZW5kIG9mIGFycmF5IHNvIHRoYXQgdGhlcmUgYXJlIG5vdCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgQ3VycmVudCBzdGF0ZSBvYmplY3RcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBzdG9yZVN0YXRlcyhzdGF0ZSkge1xuICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgbmV3IHN0YXRlIGlzIGFscmVhZHkgaW4gbGlzdFxuICAgICAgICAgICAgICAgIHZhciBpbkFyciA9IGFycmF5Q2hlY2soc3RhdGUubmFtZSk7XG4gICAgICAgICAgICAgICAgaWYoaW5BcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBzbyByZW1vdmUgYW5kIHB1c2ggdG8gZW5kIG9mIGFycmF5XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlTGlzdC5zcGxpY2UoaW5BcnIsIDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0YXRlTGlzdC5wdXNoKHN0YXRlKTtcbiAgICAgICAgICAgICAgICBpZihzdGF0ZUxpc3QubGVuZ3RoID4gNSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZUxpc3Quc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBDaGVja3MgaWYgdGhlIHN0YXRlIGluIHF1ZXN0aW9uIGhhcyBwYXJlbnQgc3RhdGVzIGFuZCBpZiBzbyBjaGVjayBpZlxuICAgICAgICAgICAgKiB0aGUgbGFzdCB2aXNpdGVkIHBhcmVudCBzdGF0ZSBhbHNvIGhhcyBhIHBhcmVudCBzdGF0ZS5cbiAgICAgICAgICAgICogc3RhdGVTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICogICBcIm5leHRTdGF0ZVwiOiBudWxsIG9yIGEgc3RhdGUgb2JqZWN0LFxuICAgICAgICAgICAgKiAgIFwiZ2V0UGFyZW50XCI6IEJvb2xlYW5cbiAgICAgICAgICAgICogfVxuICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgU3RhdGUgb2JqZWN0XG4gICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gc3RhdGVTZXR0aW5ncyBTZWUgYWJvdmVcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBoYXNQYXJlbnQoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJuZXh0U3RhdGVcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXCJnZXRQYXJlbnRcIjogZmFsc2VcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYoc3RhdGUuaGFzT3duUHJvcGVydHkoXCJkYXRhXCIpICYmIHN0YXRlLmRhdGEucGFyZW50U3RhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRzID0gc3RhdGUuZGF0YS5wYXJlbnRTdGF0ZXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2aXNpdGVkID0gW107XG4gICAgICAgICAgICAgICAgICAgIC8vaGFuZGxlIG11bHRpcGxlIHBvc3NpYmxlIHBhcmVudHNcbiAgICAgICAgICAgICAgICAgICAgaWYocGFyZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hvc2VuT25lID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWF0Y2ggcGFyZW50cyBsaXN0IGFnYWluc3QgcHJldmlvdXMgNSBzdGF0ZXMgYnkgY3JlYXRpbmcgYXJyYXkgb2YgaW5kaWNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgbGVuID0gcGFyZW50cy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaEluZGV4ID0gYXJyYXlDaGVjayhwYXJlbnRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihtYXRjaEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2l0ZWQucHVzaChtYXRjaEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBpZiBtb3JlIHRoYW4gb25lIHBhcmVudCBpcyBmb3VuZCBpbiBwcmV2aW91cyA1IHN0YXRlcyBnZXQvYWRkXG4gICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50IHdpdGggaGlnaGVzdCBpbmRleChpLmUuIG1vc3QgcmVjZW50bHkgdmlzaXRlZCkgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZpc2l0ZWQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNob3Nlbk9uZSA9IHN0YXRlTGlzdFtnZXRIaWdoZXN0VmFsKHZpc2l0ZWQpXTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYodmlzaXRlZC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9zZW5PbmUgPSBzdGF0ZUxpc3RbdmlzaXRlZFswXV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZ3JhYiBmaXJzdCBsaXN0ZWQgcGFyZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hvc2VuT25lID0gJHN0YXRlLmdldChwYXJlbnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZmlsbFN0YXRlcyhzdGF0ZS5uYW1lLCBjaG9zZW5PbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjaG9zZW5PbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZVNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5leHRTdGF0ZVwiOiBjaG9zZW5PbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZ2V0UGFyZW50XCI6IChjaG9zZW5PbmUuaGFzT3duUHJvcGVydHkoXCJkYXRhXCIpICYmIGNob3Nlbk9uZS5kYXRhLnBhcmVudFN0YXRlcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBmb3IgbnVsbCBzdGF0ZXMgb24gaXRlbXMgbm90IGluIHNpZGUgbWVudShzZWUgZnJhbWV3b3JrLWhvbWUuc2VydmljZSBhZGRUb01lbnUpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwYXJlbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlc1BhcmVudCA9ICRzdGF0ZS5nZXQocGFyZW50c1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuZXh0U3RhdGVcIjogc3RhdGVzUGFyZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImdldFBhcmVudFwiOiAoc3RhdGVzUGFyZW50Lmhhc093blByb3BlcnR5KFwiZGF0YVwiKSAmJiBzdGF0ZXNQYXJlbnQuZGF0YS5wYXJlbnRTdGF0ZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgc3RhdGVzUGFyZW50IGhhcyBiZWVuIHZpc2l0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighYXJyYXlDaGVjayhwYXJlbnRzWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZmlsbFN0YXRlcyhzdGF0ZS5uYW1lLCBzdGF0ZXNQYXJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVTZXR0aW5ncztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0SGlnaGVzdFZhbChhcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgYXJyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gZmluZCBtYXRjaGluZyBvYmplY3QgaW5kZXhcbiAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHN0YXRlTmFtZVxuICAgICAgICAgICAgKiBAcmV0dXJuIHtJbnQvQm9vbGVhbn0gbWF0Y2ggUmV0dXJucyBmYWxzZSBpZiBubyBtYXRjaCBmb3VuZCBvciBcbiAgICAgICAgICAgICogdGhlIGluZGV4IHBvc2l0aW9uIG9mIHRoZSBtYXRjaGVkIG5hbWVcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBhcnJheUNoZWNrKHN0YXRlTmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IHN0YXRlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZihzdGF0ZUxpc3RbaV0ubmFtZSA9PT0gc3RhdGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEluc2VydCBwYXJlbnQgc3RhdGUgaW50byBzdGF0ZUxpc3QgcmlnaHQgYmVmb3JlIHRhcmdldCBzdGF0ZVxuICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGFyZ2V0U3RhdGVOYW1lIFN0YXRlIG5hbWUgY3VycmVudGx5IHRhcmdldGVkIGJ5IGNhbGxpbmcgZnVuY3Rpb25cbiAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGluc2VydFN0YXRlIFN0YXRlIG9iamVjdCB0byBiZSBpbnNlcnRlZCBpbnRvIHZpc2l0ZWQgc3RhdGUgYXJyYXlcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBiYWNrZmlsbFN0YXRlcyh0YXJnZXRTdGF0ZU5hbWUsIGluc2VydFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEluZGV4ID0gYXJyYXlDaGVjayh0YXJnZXRTdGF0ZU5hbWUpO1xuICAgICAgICAgICAgICAgIHN0YXRlTGlzdC5zcGxpY2UodGFyZ2V0SW5kZXgsIDAsIGluc2VydFN0YXRlKTtcbiAgICAgICAgICAgICAgICBpZihzdGF0ZUxpc3QubGVuZ3RoID4gNSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZUxpc3Quc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbn0pKCk7IiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cbiAvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4gLyBMaWNlbnNlZCBNYXRlcmlhbHMg4oCTIFByb3BlcnR5IG9mIElCTSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4gLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuIC8gc2VjdGlvbi1jb250ZW50LXJlcXVpcmVkLmRpcmVjdGl2ZS5qcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4gLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuIC8oQykgQ29weXJpZ2h0IElCTSBDb3Jwb3JhdGlvbiAyMDE2LiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbiAvIFUuUy4gR292ZXJubWVudCBVc2VycyBSZXN0cmljdGVkIFJpZ2h0czogIFVzZSwgZHVwbGljYXRpb24gb3IgZGlzY2xvc3VyZSAgICAvXG4gLyByZXN0cmljdGVkIGJ5IEdTQSBBRFAgU2NoZWR1bGUgQ29udHJhY3Qgd2l0aCBJQk0gQ29ycC4gICAgICAgICAgICAgICAgICAgICAgL1xuIC8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbiAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZShcIngxLnVpLmZyYW1ld29ya1wiKVxuXHQuZmFjdG9yeShcImxvZ291dFNydlwiLCBbXCIkaHR0cFwiLCBcIiRxXCIsIFwiJGxvZ1wiLCBmdW5jdGlvbigkaHR0cCwgJHEsICRsb2cpIHtcblx0XHRcInVzZSBzdHJpY3RcIjtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdFwiZG9Mb2dvdXRcIjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuXHRcdFx0XHQkaHR0cC5wb3N0KFwiL2FwaS9qb3VybmV5L3VzZXJzL2xvZ291dFwiKVxuXHRcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuXHRcdFx0XHRcdFx0JGxvZy5kZWJ1ZyhcImxvZ291dFNydiBjYWxsOiAgXCIsIHJlc3VsdCk7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKCk7XG5cblx0XHRcdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cdFx0XHR9XG5cblx0XHR9O1xuXHR9XG5cdF0pO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZShcIngxLnVpLmZyYW1ld29ya1wiKVxuXHRcdC5jb250cm9sbGVyKFwiT3JnU3dpdGNoQ29udHJvbGxlclwiLCBPcmdTd2l0Y2hDb250cm9sbGVyKTtcblxuICAgICAgICBPcmdTd2l0Y2hDb250cm9sbGVyLiRpbmplY3QgPSBbXG4gICAgICAgIFx0XCIkcm9vdFNjb3BlXCIsXG4gICAgICAgIFx0XCIkc2NvcGVcIixcbiAgICAgICAgXHRcImZyYW1ld29ya0hvbWVTcnZcIlxuICAgICAgICBdO1xuXG4gICAgICAgIGZ1bmN0aW9uIE9yZ1N3aXRjaENvbnRyb2xsZXIoJHJvb3RTY29wZSwgJHNjb3BlLCBmcmFtZXdvcmtIb21lU3J2KSB7XG4gICAgICAgIFx0dmFyIHZtID0gdGhpcztcbiAgICAgICAgXHR2YXIgb3JpZ2luYWxPcmdJZCA9IG51bGw7XG5cblx0XHRcdHZtLnNob3dMb2FkaW5nID0gdHJ1ZTtcblx0XHRcdHZtLm9yZ0FycmF5ID0gW107XG5cdFx0XHR2bS5zZWxlY3RlZE9yZyA9IG51bGw7XG5cblx0XHRcdCRzY29wZS5kYXRhLmdldE9yZ3MoKS50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcblx0XHRcdFx0dm0ub3JnQXJyYXkgPSByZXNwLmRhdGE7XG5cdFx0XHRcdHZhciB1c2VyRGF0YSA9IGZyYW1ld29ya0hvbWVTcnYuZ2V0VXNlcigpO1xuXHRcdFx0XHRvcmlnaW5hbE9yZ0lkID0gdXNlckRhdGEub3JnSWQ7XG5cdFx0XHRcdGZvcih2YXIgaSA9IDAsIGxlbiA9IHZtLm9yZ0FycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG5cdFx0XHRcdFx0aWYodm0ub3JnQXJyYXlbaV0ub3JnSWQgPT09IG9yaWdpbmFsT3JnSWQpIHtcblx0XHRcdFx0XHRcdCRzY29wZS5kYXRhLnNlbGVjdGVkT3JnID0gdm0ub3JnQXJyYXlbaV07XG5cdFx0XHRcdFx0XHQkc2NvcGUuZGF0YS5zZWxlY3RlZE9yZy5zZWxlY3RlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0dm0uc2hvd0xvYWRpbmcgPSBmYWxzZTtcblx0XHRcdH0pO1xuXG5cdFx0XHR2bS5zZWxlY3RPcmcgPSBmdW5jdGlvbihvcmcpIHtcblx0XHRcdFx0JHNjb3BlLiRwYXJlbnQub3B0aW9ucy5hY3Rpb25EaXNhYmxlZCA9IChvcmcub3JnSWQgPT09IG9yaWdpbmFsT3JnSWQpO1xuXHRcdFx0XHRpZihvcmcub3JnSWQgIT09ICRzY29wZS5kYXRhLnNlbGVjdGVkT3JnLm9yZ0lkKSB7XG5cdFx0XHRcdFx0JHNjb3BlLmRhdGEuc2VsZWN0ZWRPcmcuc2VsZWN0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRvcmcuc2VsZWN0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdCRzY29wZS5kYXRhLnNlbGVjdGVkT3JnID0gb3JnO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0fVxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJ4MS51aS5mcmFtZXdvcmtcIilcbiAgICAgICAgLmZhY3RvcnkoXCJTdWJOYXZXaWRnZXRzU2VydmljZVwiLCBzdWJOYXZXaWRnZXRzU2VydmljZSk7XG5cbiAgICAgICAgc3ViTmF2V2lkZ2V0c1NlcnZpY2UuJGluamVjdCA9IFsgXCIkc3RhdGVcIiBdO1xuXG4gICAgICAgIGZ1bmN0aW9uIHN1Yk5hdldpZGdldHNTZXJ2aWNlKCRzdGF0ZSkge1xuICAgICAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICAgICAgc2V0VmlzaWJpbGl0eTogc2V0VmlzaWJpbGl0eVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBTZXQgdmlzaWJpbGl0eSBmbGFnIGZvciBkaXJlY3RpdmVzIGluIHN1Ym5hdlxuICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3aWRnZXRzIEFycmF5IG9mIHdpZGdldCBvYmpzXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gc2V0VmlzaWJpbGl0eSh3aWRnZXRzKSB7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgbGVuID0gd2lkZ2V0cy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdyA9IHdpZGdldHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmKHcudmFsaWRTdGF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHcubWFrZVZpc2libGUgPSBpbkFycmF5KHcudmFsaWRTdGF0ZXMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdy5tYWtlVmlzaWJsZSA9IHcubWFrZVZpc2libGUgPyB3Lm1ha2VWaXNpYmxlIDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gbWF0Y2ggdmFsaWQgc3RhdGVzIHRvIGN1cnJlbnQgc3RhdGVcbiAgICAgICAgICAgICogQHBhcmFtIHtBcnJheX0gc3RhdGVzIEFycmF5IHN0YXRlIG5hbWVzIHJlbGV2YW50IHRvIGN1cnJlbnQgd2lkZ2V0XG4gICAgICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IGV4aXN0cyBJZiBjdXJyZW50IHN0YXRlIG1hdGNoZXMgb25lIG9mIHRoZSB2YWxpZCBzdGF0ZXNcbiAgICAgICAgICAgICogZm9yIGN1cnJlbnQgd2lkZ2V0XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gaW5BcnJheShzdGF0ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXhpc3RzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgbGVuID0gc3RhdGVzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKCRzdGF0ZS5pbmNsdWRlcyhzdGF0ZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKFwieDEudWkuZnJhbWV3b3JrXCIpXG5cdFx0LmRpcmVjdGl2ZShcImZ3VG9wTGV2ZWxcIiwgZndUb3BMZXZlbCk7XG5cblx0XHRmd1RvcExldmVsLiRpbmplY3QgPSBbXG5cdFx0XHRcIiRjb21waWxlXCJcblx0XHRdO1xuXG5cdFx0ZnVuY3Rpb24gZndUb3BMZXZlbCgkY29tcGlsZSkge1xuXHRcdFx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRcdFx0c2NvcGU6IHtcblx0XHRcdFx0XHRpdGVtOiBcIj1cIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRyZXN0cmljdDogXCJFQVwiLFxuXHRcdFx0XHR0ZW1wbGF0ZTogXCJcIixcblx0XHRcdFx0bGluazogbGlua0Z1bmNcblx0XHRcdH07XG5cblx0XHRcdHJldHVybiBkaXJlY3RpdmU7XG5cblx0XHRcdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbGVtZW50KSB7XG5cdFx0XHRcdGVsZW1lbnQucmVwbGFjZVdpdGgoJGNvbXBpbGUoc2NvcGUuaXRlbSkoc2NvcGUpKTtcblx0XHRcdH1cdFx0XHRcblx0XHR9XG59KSgpOyIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG4gLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuIC8gTGljZW5zZWQgTWF0ZXJpYWxzIOKAkyBQcm9wZXJ0eSBvZiBJQk0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuIC8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbiAvIHNlY3Rpb24tY29udGVudC1yZXF1aXJlZC5kaXJlY3RpdmUuanMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuIC8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbiAvKEMpIENvcHlyaWdodCBJQk0gQ29ycG9yYXRpb24gMjAxNi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4gLyBVLlMuIEdvdmVybm1lbnQgVXNlcnMgUmVzdHJpY3RlZCBSaWdodHM6ICBVc2UsIGR1cGxpY2F0aW9uIG9yIGRpc2Nsb3N1cmUgICAgL1xuIC8gcmVzdHJpY3RlZCBieSBHU0EgQURQIFNjaGVkdWxlIENvbnRyYWN0IHdpdGggSUJNIENvcnAuICAgICAgICAgICAgICAgICAgICAgIC9cbiAvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4gLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cbmFuZ3VsYXIubW9kdWxlKFwibWFjcm8tbWVudVwiKVxuXHQuZGlyZWN0aXZlKFwidG9wTWFjcm9NZW51XCIsIFtcIiR4MXBvcG92ZXJcIixcblx0XHRmdW5jdGlvbigkeDFwb3BvdmVyKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHJlc3RyaWN0OiBcIkVBXCIsXG5cdFx0XHRsaW5rOiBmdW5jdGlvbigkc2NvcGUsIGVsZW1lbnQpIHtcblx0XHRcdFx0JHNjb3BlLnRvcE1hY3JvTWVudVBvcG92ZXIgPSAkeDFwb3BvdmVyKGVsZW1lbnQsIHtcblx0XHRcdFx0XHRcdHBsYWNlbWVudDogXCJib3R0b20tcmlnaHRcIixcblx0XHRcdFx0XHRcdHRyaWdnZXI6IFwibWFudWFsXCIsXG5cdFx0XHRcdFx0ICAgIGNvbnRlbnRUZW1wbGF0ZTogXCJtYWNyby1tZW51L21hY3JvLW1lbnUuaHRtbFwiLFxuXHRcdFx0XHRcdCAgICBvdXRzaWRlQ2xpY2s6IHRydWVcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cdFx0XHRjb250cm9sbGVyOiBcInRvcE1hY3JvTWVudUN0cmxcIlxuXHRcdH07XG5cdH1dKTsiLCIvKipcbiAqXG4gKiBMaWNlbnNlZCBNYXRlcmlhbHMgLSBQcm9wZXJ0eSBvZiBJQk1cbiAqXG4gKiBtYWNyby1tZW51LmNvbnRyb2xsZXIuanNcbiAqXG4gKiAoQykgQ29weXJpZ2h0IElCTSBDb3Jwb3JhdGlvbiAyMDE2LlxuICogVS5TLiBHb3Zlcm5tZW50IFVzZXJzIFJlc3RyaWN0ZWQgUmlnaHRzOiAgVXNlLCBkdXBsaWNhdGlvbiBvciBkaXNjbG9zdXJlXG4gKiByZXN0cmljdGVkIGJ5IEdTQSBBRFAgU2NoZWR1bGUgQ29udHJhY3Qgd2l0aCBJQk0gQ29ycC5cbiAqXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoXCJtYWNyby1tZW51XCIpXG5cdC5jb250cm9sbGVyKFwidG9wTWFjcm9NZW51Q3RybFwiLCBbXG5cdFx0XCIkcm9vdFNjb3BlXCIsXG5cdFx0XCIkc2NvcGVcIixcblx0XHRcImZyYW1ld29ya0hvbWVTcnZcIixcblx0XHRcIiRzdGF0ZVwiLFxuXHRcdFwiJGxvZ1wiLFxuXHRcdFwidG9wTWFjcm9NZW51U2VydmljZVwiLFxuXHRcdFwiZnJhbWV3b3JrQ29uc3RhbnRzXCIsXG5cdFx0ZnVuY3Rpb24gKCRyb290U2NvcGUsICRzY29wZSwgZnJhbWV3b3JrSG9tZVNydiwgJHN0YXRlLFxuXHRcdFx0XHQgICRsb2csdG9wTWFjcm9NZW51U2VydmljZSxmcmFtZXdvcmtDb25zdGFudHMpIHtcblx0XHRcdFwidXNlIHN0cmljdFwiO1xuXG5cblx0XHRcdCRzY29wZS50b3BNYWNyb01lbnVQb3BvdmVyID0ge307XG5cblx0XHRcdCRzY29wZS5uYXZJdGVtcyA9ICBnZXRNYWNyb01lbnVJdGVtcygpO1xuXG5cdFx0XHQkc2NvcGUudG9nZ2xlVG9wTWFjcm9NZW51ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQkc2NvcGUuaXNUb3BNYWNyb01lbnVPcGVuID0gISRzY29wZS5pc1RvcE1hY3JvTWVudU9wZW47XG5cdFx0XHR9O1xuXG5cdFx0XHRmdW5jdGlvbiBnZXRNYWNyb01lbnVJdGVtcygpe1xuXHRcdFx0XHR2YXIgbWFjcm9NZW51SXRlbXNSZXN1bHQ7XG5cdFx0XHRcdGlmICgkc2NvcGUubmF2SXRlbXMpe1xuXHRcdFx0XHRcdG1hY3JvTWVudUl0ZW1zUmVzdWx0PVtdO1xuXHRcdFx0XHRcdGZvciAodmFyIGk9MDsgaTwgJHNjb3BlLm5hdkl0ZW1zLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0XHRcdGlmICgkc2NvcGUubmF2SXRlbXNbaV0gJiYgJHNjb3BlLm5hdkl0ZW1zW2ldLml0ZW1zICYmXG5cdFx0XHRcdFx0XHRcdCRzY29wZS5uYXZJdGVtc1tpXS5pdGVtcy5sZW5ndGggPiAwKXtcblx0XHRcdFx0XHRcdFx0bWFjcm9NZW51SXRlbXNSZXN1bHQucHVzaCgkc2NvcGUubmF2SXRlbXNbaV0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYWNyb01lbnVJdGVtc1Jlc3VsdDtcblx0XHRcdH1cblxuXG5cdFx0XHQkc2NvcGUuJG9uKGZyYW1ld29ya0NvbnN0YW50cy5FdmVudHMuVE9QX01BQ1JPX01FTlVfQ0hBTkdFRCwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRkb1RvcE1hY3JvTWVudSgpO1xuXHRcdFx0XHQkc2NvcGUuaGFtYnVyZ2VyU3RhdGUgPSAkc2NvcGUuaGFtYnVyZ2VyU3RhdGUgPT09IFwiYWN0aXZlXCIgPyBcIlwiIDogXCJhY3RpdmVcIjtcblx0XHRcdH0pO1xuXG5cdFx0XHRmdW5jdGlvbiBkb1RvcE1hY3JvTWVudSgpIHtcblx0XHRcdFx0XHQkc2NvcGUudG9nZ2xlVG9wTWFjcm9NZW51KCk7XG5cdFx0XHRcdFx0cGFzc0RhdGFUb1RvcE1hY3JvTWVudVBvcG92ZXIoKTtcblx0XHRcdFx0XHRzaG93T3JIaWRlVG9wTWFjcm9NZW51KCk7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIHBhc3NEYXRhVG9Ub3BNYWNyb01lbnVQb3BvdmVyKCl7XG5cdFx0XHRcdCRzY29wZS50b3BNYWNyb01lbnVQb3BvdmVyLiRzY29wZS5uYXZJdGVtcyA9ICRzY29wZS5uYXZJdGVtcztcblx0XHRcdFx0JHNjb3BlLnRvcE1hY3JvTWVudVBvcG92ZXIuJHNjb3BlLm1hY3JvTWVudUNvbHVtbkxpbWl0PTQ7XG5cdFx0XHRcdCRzY29wZS50b3BNYWNyb01lbnVQb3BvdmVyLiRzY29wZS5nb1RvVXJsID0gZnVuY3Rpb24oaXRlbVN0YXRlKSB7XG5cdFx0XHRcdFx0JHN0YXRlLmdvKGl0ZW1TdGF0ZSk7XG5cdFx0XHRcdFx0JHNjb3BlLmlzVG9wTWFjcm9NZW51T3Blbj10b3BNYWNyb01lbnVTZXJ2aWNlLmhpZGVUb3BNYWNyb01lbnUoJHNjb3BlLnRvcE1hY3JvTWVudVBvcG92ZXIpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdCRzY29wZS50b3BNYWNyb01lbnVQb3BvdmVyLiRzY29wZS5tYWNyb01lbnVDb2x1bW5XaWR0aCA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0dmFyIHJlc3VsdD1cImNvbC1tZC0zXCI7XG5cdFx0XHRcdFx0dmFyIHBvcE92ZXJOYXZJdGVtcz0kc2NvcGUudG9wTWFjcm9NZW51UG9wb3Zlci4kc2NvcGUubmF2SXRlbXM7XG5cdFx0XHRcdFx0aWYgKHBvcE92ZXJOYXZJdGVtcy5sZW5ndGggJiYgKHBvcE92ZXJOYXZJdGVtcy5sZW5ndGggPD1cblx0XHRcdFx0XHRcdCRzY29wZS50b3BNYWNyb01lbnVQb3BvdmVyLiRzY29wZS5tYWNyb01lbnVDb2x1bW5MaW1pdCkgKXtcblx0XHRcdFx0XHRcdHJlc3VsdD1cImNvbC1tZC1cIiArICgxMi9wb3BPdmVyTmF2SXRlbXMubGVuZ3RoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gc2hvd09ySGlkZVRvcE1hY3JvTWVudSgpe1xuXHRcdFx0XHRpZiAoJHNjb3BlLmlzVG9wTWFjcm9NZW51T3Blbil7XG5cdFx0XHRcdFx0JHNjb3BlLmlzVG9wTWFjcm9NZW51T3Blbj10b3BNYWNyb01lbnVTZXJ2aWNlLnNob3dUb3BNYWNyb01lbnUoJHNjb3BlLnRvcE1hY3JvTWVudVBvcG92ZXIpO1xuXHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHQkc2NvcGUuaXNUb3BNYWNyb01lbnVPcGVuPXRvcE1hY3JvTWVudVNlcnZpY2UuaGlkZVRvcE1hY3JvTWVudSgkc2NvcGUudG9wTWFjcm9NZW51UG9wb3Zlcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH1dKTtcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG4gLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuIC8gTGljZW5zZWQgTWF0ZXJpYWxzIOKAkyBQcm9wZXJ0eSBvZiBJQk0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuIC8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbiAvIG1hY3JvLW1lbnUuc2VydmljZS5qcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4gLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuIC8oQykgQ29weXJpZ2h0IElCTSBDb3Jwb3JhdGlvbiAyMDE2LiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbiAvIFUuUy4gR292ZXJubWVudCBVc2VycyBSZXN0cmljdGVkIFJpZ2h0czogIFVzZSwgZHVwbGljYXRpb24gb3IgZGlzY2xvc3VyZSAgICAvXG4gLyByZXN0cmljdGVkIGJ5IEdTQSBBRFAgU2NoZWR1bGUgQ29udHJhY3Qgd2l0aCBJQk0gQ29ycC4gICAgICAgICAgICAgICAgICAgICAgL1xuIC8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbiAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblxuYW5ndWxhci5tb2R1bGUoXCJtYWNyby1tZW51XCIpXG5cdC5zZXJ2aWNlKFwidG9wTWFjcm9NZW51U2VydmljZVwiLCBbXG5cblx0XHRmdW5jdGlvbiAoKSB7XG5cdFx0XHRcInVzZSBzdHJpY3RcIjtcblxuXG5cdFx0XHR0aGlzLmhpZGVUb3BNYWNyb01lbnUgPSBmdW5jdGlvbih0b3BNYWNyb01lbnVQb3BvdmVyKSB7XG5cdFx0XHRcdHZhciBpc1RvcE1hY3JvTWVudU9wZW49dHJ1ZTtcblx0XHRcdFx0aWYodG9wTWFjcm9NZW51UG9wb3Zlcil7XG5cdFx0XHRcdFx0dG9wTWFjcm9NZW51UG9wb3Zlci4kc2NvcGUuJGhpZGUoKTtcblx0XHRcdFx0XHRpc1RvcE1hY3JvTWVudU9wZW49ZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGlzVG9wTWFjcm9NZW51T3Blbjtcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuc2hvd1RvcE1hY3JvTWVudSA9IGZ1bmN0aW9uKHRvcE1hY3JvTWVudVBvcG92ZXIpIHtcblx0XHRcdFx0dmFyIGlzVG9wTWFjcm9NZW51T3Blbj1mYWxzZTtcblx0XHRcdFx0aWYodG9wTWFjcm9NZW51UG9wb3Zlcil7XG5cdFx0XHRcdFx0dG9wTWFjcm9NZW51UG9wb3Zlci4kc2NvcGUuJHNob3coKTtcblx0XHRcdFx0XHRpc1RvcE1hY3JvTWVudU9wZW49dHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gaXNUb3BNYWNyb01lbnVPcGVuO1xuXHRcdFx0fTtcblxuXHRcdH1cblx0XSk7IiwiLyoqXG4gKlxuICogTGljZW5zZWQgTWF0ZXJpYWxzIOKAkyBQcm9wZXJ0eSBvZiBJQk1cbiAqXG4gKiBmcmFtZXdvcmstaG9tZS5jb25maWcuanNcbiAqXG4gKiAoQykgQ29weXJpZ2h0IElCTSBDb3Jwb3JhdGlvbiAyMDE2LlxuICogVS5TLiBHb3Zlcm5tZW50IFVzZXJzIFJlc3RyaWN0ZWQgUmlnaHRzOiAgVXNlLCBkdXBsaWNhdGlvbiBvciBkaXNjbG9zdXJlXG4gKiByZXN0cmljdGVkIGJ5IEdTQSBBRFAgU2NoZWR1bGUgQ29udHJhY3Qgd2l0aCBJQk0gQ29ycC5cbiAqXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoXCJmcmFtZXdvcmstaG9tZVwiKVxuXHQucHJvdmlkZXIoXCJmcmFtZXdvcmtDcmVhdGVTdGF0ZXNcIiwgZnVuY3Rpb24gY3JlYXRlU3RhdGVzKCRzdGF0ZVByb3ZpZGVyKSB7XG5cdFx0dGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0YWRkU3RhdGU6IGZ1bmN0aW9uKHN0YXRlTmFtZSwgc3RhdGVDb25maWcpIHtcblx0XHRcdFx0XHRcdCRzdGF0ZVByb3ZpZGVyLnN0YXRlKHN0YXRlTmFtZSwgc3RhdGVDb25maWcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cdFx0fSlcblx0LmNvbmZpZyhbXG5cdFx0XCIkc3RhdGVQcm92aWRlclwiLFxuXHRcdGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyKSB7XG5cdFx0XHRcInVzZSBzdHJpY3RcIjtcblxuXHRcdFx0JHN0YXRlUHJvdmlkZXJcblx0XHRcdFx0LnN0YXRlKFwiZnJhbWV3b3JrSG9tZVwiLCB7XG5cdFx0XHRcdFx0dXJsOiBcIlwiLFxuXHRcdFx0XHRcdHRlbXBsYXRlVXJsOiBcImhvbWUvZnJhbWV3b3JrLWhvbWUuaHRtbFwiLFxuXHRcdFx0XHRcdGNvbnRyb2xsZXI6IFwiZnJhbWV3b3JrSG9tZUN0cmxcIlxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuc3RhdGUoXCJmcmFtZXdvcmtIb21lLmRhc2hib2FyZHNcIiwge1xuXHRcdFx0XHRcdHVybDogXCIvZGFzaGJvYXJkc1wiLFxuXHRcdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRcdFwibmFtZVwiOiBcIngxVWlOZ0ZyYW1ld29yay5OQVYuREFTSEJPQVJEU1wiLFxuXHRcdFx0XHRcdFx0XCJkdW1teUxpbmtcIjogdHJ1ZVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdFx0LnN0YXRlKFwiZnJhbWV3b3JrSG9tZS5hbmFseXplXCIsIHtcblx0XHRcdFx0XHR1cmw6IFwiL2FuYWx5emVcIixcblx0XHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0XHRcIm5hbWVcIjogXCJ4MVVpTmdGcmFtZXdvcmsuTkFWLkFOQUxZWkVcIixcblx0XHRcdFx0XHRcdFwiZHVtbXlMaW5rXCI6IHRydWVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5zdGF0ZShcImZyYW1ld29ya0hvbWUuY3JlYXRlXCIsIHtcblx0XHRcdFx0XHR1cmw6IFwiL2NyZWF0ZVwiLFxuXHRcdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRcdFwibmFtZVwiOiBcIngxVWlOZ0ZyYW1ld29yay5OQVYuQ1JFQVRFXCIsXG5cdFx0XHRcdFx0XHRcImR1bW15TGlua1wiOiB0cnVlXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuc3RhdGUoXCJmcmFtZXdvcmtIb21lLm1hbmFnZVwiLCB7XG5cdFx0XHRcdFx0dXJsOiBcIi9tYW5hZ2VcIixcblx0XHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0XHRcIm5hbWVcIjogXCJ4MVVpTmdGcmFtZXdvcmsuTkFWLk1BTkFHRVwiLFxuXHRcdFx0XHRcdFx0XCJkdW1teUxpbmtcIjogdHJ1ZVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdFx0LnN0YXRlKFwiZnJhbWV3b3JrSG9tZS5hZG1pblwiLCB7XG5cdFx0XHRcdFx0dXJsOiBcIi9hZG1pblwiLFxuXHRcdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRcdFwibmFtZVwiOiBcIngxVWlOZ0ZyYW1ld29yay5OQVYuQURNSU5cIixcblx0XHRcdFx0XHRcdFwiZHVtbXlMaW5rXCI6IHRydWVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5zdGF0ZShcImZyYW1ld29ya0hvbWUubGltaXRlZFwiLCB7XG5cdFx0XHRcdFx0dXJsOiBcIi9saW1pdGVkXCIsXG5cdFx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdFx0XCJuYW1lXCI6IFwieDFVaU5nRnJhbWV3b3JrLk5BVi5MSU1JVEVEX0FWQUlMQUJJTElUWVwiLFxuXHRcdFx0XHRcdFx0XCJkdW1teUxpbmtcIjogdHJ1ZVxuXHRcdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1dKTsiLCIvKipcbiAqXG4gKiBMaWNlbnNlZCBNYXRlcmlhbHMgLSBQcm9wZXJ0eSBvZiBJQk1cbiAqXG4gKiBmcmFtZXdvcmstaG9tZS5jb250cm9sbGVyLmpzXG4gKlxuICogKEMpIENvcHlyaWdodCBJQk0gQ29ycG9yYXRpb24gMjAxNi5cbiAqIFUuUy4gR292ZXJubWVudCBVc2VycyBSZXN0cmljdGVkIFJpZ2h0czogIFVzZSwgZHVwbGljYXRpb24gb3IgZGlzY2xvc3VyZVxuICogcmVzdHJpY3RlZCBieSBHU0EgQURQIFNjaGVkdWxlIENvbnRyYWN0IHdpdGggSUJNIENvcnAuXG4gKlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKFwiZnJhbWV3b3JrLWhvbWVcIilcblx0LmNvbnRyb2xsZXIoXCJmcmFtZXdvcmtIb21lQ3RybFwiLCBbXG5cdFx0XCIkcm9vdFNjb3BlXCIsXG5cdFx0XCIkc2NvcGVcIixcblx0XHRcImZyYW1ld29ya0hvbWVTcnZcIixcblx0XHRcIlN1Yk5hdldpZGdldHNTZXJ2aWNlXCIsXG5cdFx0XCJ4MVV0aWxzXCIsXG5cdFx0XCIkc3RhdGVcIixcblx0XHRcIiR3aW5kb3dcIixcblx0XHRcIiRsb2dcIixcblx0XHRcIngxLnVpLnBvcG92ZXIuZXZlbnRzXCIsXG5cdFx0XCJmcmFtZXdvcmtDb25zdGFudHNcIixcblx0XHRcImxvZ291dFNydlwiLFxuXHRcdFwieDFNb2RhbFwiLFxuXHRcdGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkc2NvcGUsIGZyYW1ld29ya0hvbWVTcnYsIFN1Yk5hdldpZGdldHNTZXJ2aWNlLCB4MVV0aWxzLCRzdGF0ZSxcblx0XHRcdFx0ICAkd2luZG93LCRsb2cscG9wb3ZlckV2ZW50LGZyYW1ld29ya0NvbnN0YW50cyxsb2dvdXRTcnYsIHgxTW9kYWwpIHtcblx0XHRcdFwidXNlIHN0cmljdFwiO1xuXG5cdFx0XHQvKmlmIHlvdSB3YW50cyB0byBvcGVuIHNpZGUgbmF2IG1lbnUsIGp1c3Qgc2V0XG5cdFx0XHQgJHNjb3BlLmlzU2lkZU5hdk9wZW4gPSB0cnVlO1xuXHRcdFx0ICRzY29wZS50b3BNYWNyb01lbnVPcHRpb249IGZhbHNlO1xuXHRcdFx0IGlmIHlvdSB3YW50cyB0byBvcGVuIHRvcCBtYWNybyBtZW51LCBqdXN0IHNldFxuXHRcdFx0ICRzY29wZS5pc1NpZGVOYXZPcGVuID0gZmFsc2U7XG5cdFx0XHQgJHNjb3BlLnRvcE1hY3JvTWVudU9wdGlvbj0gdHJ1ZSA7XG5cdFx0XHQqL1xuXHRcdFx0JHNjb3BlLmlzU2lkZU5hdk9wZW4gPSB0cnVlO1xuXHRcdFx0JHNjb3BlLnRvcE1hY3JvTWVudU9wdGlvbj0gZmFsc2U7XG5cblx0XHRcdCRzY29wZS5uYXZJdGVtcyA9IGZyYW1ld29ya0hvbWVTcnYuZ2V0TmF2SXRlbXMoKTtcblx0XHRcdCRzY29wZS50b3BMZXZlbCA9IGZyYW1ld29ya0hvbWVTcnYuZ2V0VG9wTGV2ZWwoKTtcblx0XHRcdCRzY29wZS5zdWJOYXZXaWRnZXRzID0gZnJhbWV3b3JrSG9tZVNydi5nZXRTZWNvbmRhcnlMZXZlbCgpO1xuXG5cdFx0XHQvL2luaXRpYWwgc2V0dXAgb2Ygc3VibmF2IHdpZGdldHNcblx0XHRcdGluaXRTdWJOYXYoKTtcblxuXHRcdFx0Ly9yZWZyZXNoIHN1Ym5hdiB3aWRnZXRzXG5cdFx0XHR2YXIgc3RhdGVMaXN0ZW5lciA9ICRyb290U2NvcGUuJG9uKFwiJHN0YXRlQ2hhbmdlU3VjY2Vzc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpbml0U3ViTmF2KCk7XG4gICAgICAgICAgICB9KTtcblxuXHRcdFx0JHNjb3BlLnByb2R1Y3RUaXRsZSA9IGZyYW1ld29ya0hvbWVTcnYuZ2V0UHJvZHVjdFRpdGxlKCk7XG5cdFx0XHQkc2NvcGUuc2hvd0JldGFCYWRnZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoZnJhbWV3b3JrSG9tZVNydi5nZXRTaG93QmV0YUJhZGdlKCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gIHgxVXRpbHMudHJhbnNsYXRlKFwieDFVaU5nRnJhbWV3b3JrLkJFVEFcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0XHR9O1xuXHRcdFx0JHNjb3BlLnZlcnNpb24gPSBcIlwiO1xuXHRcdFx0Ly8kc2NvcGUudXNlciA9ICRyb290U2NvcGUudXNlcjtcblx0XHRcdCRzY29wZS51c2VyID0gZnJhbWV3b3JrSG9tZVNydi5nZXRVc2VyKCk7XG5cblx0XHRcdC8vSGVscERvY3NTZXJ2aWNlLnNldERlZmF1bHRUb2tlbihjb25zdGFudC5kZWZhdWx0U3RhdGUpO1xuXG5cdFx0XHQkc2NvcGUudG9nZ2xlTWVudSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0JHNjb3BlLmlzU2lkZU5hdk9wZW4gPSAhJHNjb3BlLmlzU2lkZU5hdk9wZW47XG5cdFx0XHR9O1xuXG5cblx0XHRcdCRzY29wZS4kb24oXCJ4MS51aS50b3AtbmF2aWdhdGlvbi5oYW1idXJnZXIuY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoJHNjb3BlLnRvcE1hY3JvTWVudU9wdGlvbil7XG5cdFx0XHRcdFx0JHNjb3BlLiRlbWl0KGZyYW1ld29ya0NvbnN0YW50cy5FdmVudHMuVE9QX01BQ1JPX01FTlVfQ0hBTkdFRCk7XG5cdFx0XHRcdH0gZWxzZXtcblx0XHRcdFx0XHQkc2NvcGUudG9nZ2xlTWVudSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCRzY29wZS5oYW1idXJnZXJTdGF0ZSA9ICRzY29wZS5oYW1idXJnZXJTdGF0ZSA9PT0gXCJhY3RpdmVcIiA/IFwiXCIgOiBcImFjdGl2ZVwiO1xuXHRcdFx0fSk7XG5cblxuXHRcdFx0JHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0JHNjb3BlLiRicm9hZGNhc3QocG9wb3ZlckV2ZW50LkNBTkNFTF9QT1BPVkVSKTtcblx0XHRcdFx0JHN0YXRlLmdvKFwiZnJhbWV3b3JrSG9tZVwiKTtcblx0XHRcdFx0bG9nb3V0U3J2LmRvTG9nb3V0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuXHRcdFx0XHRcdCR3aW5kb3cub3BlbihyZXN1bHQsIFwiQ1NBX0xvZ291dFwiKTtcblx0XHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0XHQkbG9nLmVycm9yKFwiVW5hYmxlIHRvIGdlbmVyYXRlIERvYyBVcmw6IFwiLCBlcnJvcik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fTtcblxuXHRcdFx0JHNjb3BlLmdldEhlbHBJdGVtcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gZnJhbWV3b3JrSG9tZVNydi5nZXRIZWxwSXRlbXMoKTtcblx0XHRcdH07XG5cblx0XHRcdCRzY29wZS5zd2l0Y2hPcmcgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGhhbmRsZXIgPSBmcmFtZXdvcmtIb21lU3J2LmdldE9yZ0NhbGxiYWNrKCk7XG5cdFx0XHRcdHZhciBvcmdNb2RhbCA9IHtcblx0XHRcdFx0XHRvcHRpb25zOiB7XG5cdFx0XHRcdFx0XHRoZWFkZXJUZXh0OiB4MVV0aWxzLnRyYW5zbGF0ZShcIngxVWlOZ0ZyYW1ld29yay5PUkdfTU9EQUwuSEVBREVSXCIpLFxuXHRcdFx0XHRcdFx0c2hvd0Nsb3NlQnV0dG9uOiBmYWxzZSxcblx0XHRcdFx0XHRcdGFjdGlvbkJ1dHRvblRleHQ6IHgxVXRpbHMudHJhbnNsYXRlKFwieDFVaU5nRnJhbWV3b3JrLk9SR19NT0RBTC5PS1wiKSxcblx0XHRcdFx0XHRcdGFjdGlvbkRpc2FibGVkOiB0cnVlXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzZXR0aW5nczoge1xuXHRcdFx0XHRcdFx0c2l6ZTogXCJ4bFwiLFxuXHRcdFx0XHRcdFx0Y29udGVudFRlbXBsYXRlOiBcIm9yZy1zd2l0Y2gvb3JnLXN3aXRjaC5odG1sXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRcdGdldE9yZ3M6IGhhbmRsZXJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHRcdHgxTW9kYWwuc2hvdyhvcmdNb2RhbCkudGhlbihmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcdFx0Ly91c2VyIHNlbGVjdGVkIGFuIG9yZyBhbmQgbm93IHRoZSBvcmlnaW5hdGluZyBhcHAgbmVlZHMgdG8ga25vdyBhYm91dCBpdFxuXHRcdFx0XHRcdHZhciBzZW5kU2VsZWN0ZWQgPSBmcmFtZXdvcmtIb21lU3J2LmdldFNlbGVjdGVkT3JnQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRzZW5kU2VsZWN0ZWQoZGF0YSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fTtcblxuXHRcdFx0ZnVuY3Rpb24gaW5pdFN1Yk5hdigpIHtcblx0XHRcdFx0dmFyIHdpZGdldHMgPSBmcmFtZXdvcmtIb21lU3J2LmdldFNlY29uZGFyeUxldmVsKCk7XG4gICAgICAgICAgICAgICAgU3ViTmF2V2lkZ2V0c1NlcnZpY2Uuc2V0VmlzaWJpbGl0eSh3aWRnZXRzKTtcblx0XHRcdH1cblxuXG5cdFx0XHQvL2xpc3RlbmVyc1xuXHRcdFx0dmFyIG5hdkxpc3RlbmVyID0gJHJvb3RTY29wZS4kb24oXG5cdFx0XHRcdGZyYW1ld29ya0NvbnN0YW50cy5FdmVudHMuTkFWX0lURU1TX1VQREFURUQsXG5cdFx0XHRcdGZ1bmN0aW9uKGV2ZW50LCBuYXZJdGVtcyl7XG5cdFx0XHRcdFx0JHNjb3BlLm5hdkl0ZW1zID0gbmF2SXRlbXM7XG5cdFx0XHR9KTtcblxuXHRcdFx0dmFyIHRvcE5hdkxpc3RlbmVyID0gJHJvb3RTY29wZS4kb24oXG5cdFx0XHRcdGZyYW1ld29ya0NvbnN0YW50cy5FdmVudHMuVE9QX05BVl9JVEVNU19VUERBVEVELFxuXHRcdFx0XHRmdW5jdGlvbihldmVudCwgbmF2SXRlbXMpe1xuXHRcdFx0XHRcdCRzY29wZS50b3BuYXZJdGVtcyA9IG5hdkl0ZW1zO1xuXHRcdFx0fSk7XG5cblx0XHRcdHZhciBzdWJOYXZMaXN0ZW5lciA9ICRyb290U2NvcGUuJG9uKFxuXHRcdFx0XHRmcmFtZXdvcmtDb25zdGFudHMuRXZlbnRzLlNVQl9OQVZfSVRFTVNfVVBEQVRFRCxcblx0XHRcdFx0ZnVuY3Rpb24oZXZlbnQsIG5hdkl0ZW1zKXtcblx0XHRcdFx0XHQkc2NvcGUuc3VibmF2SXRlbXMgPSBuYXZJdGVtcztcblx0XHRcdH0pO1xuXG5cdFx0XHQvL2NsZWFuIHVwXG5cdFx0XHQkc2NvcGUuJG9uKFwiZGVzdHJveVwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c3RhdGVMaXN0ZW5lcigpO1xuXHRcdFx0XHRuYXZMaXN0ZW5lcigpO1xuXHRcdFx0XHR0b3BOYXZMaXN0ZW5lcigpO1xuXHRcdFx0XHRzdWJOYXZMaXN0ZW5lcigpO1xuXHRcdFx0fSk7XG5cblx0XHR9XSk7XG4iLCIvKipcbiAqXG4gKiBMaWNlbnNlZCBNYXRlcmlhbHMgLSBQcm9wZXJ0eSBvZiBJQk1cbiAqXG4gKiBmcmFtZXdvcmstaG9tZS5zZXJ2aWNlLmpzXG4gKlxuICogKEMpIENvcHlyaWdodCBJQk0gQ29ycG9yYXRpb24gMjAxNi5cbiAqIFUuUy4gR292ZXJubWVudCBVc2VycyBSZXN0cmljdGVkIFJpZ2h0czogIFVzZSwgZHVwbGljYXRpb24gb3IgZGlzY2xvc3VyZVxuICogcmVzdHJpY3RlZCBieSBHU0EgQURQIFNjaGVkdWxlIENvbnRyYWN0IHdpdGggSUJNIENvcnAuXG4gKlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKFwiZnJhbWV3b3JrLWhvbWVcIilcblx0LnNlcnZpY2UoXCJmcmFtZXdvcmtIb21lU3J2XCIsIFtcblx0XHRcIngxVXRpbHNcIixcblx0XHRcImZyYW1ld29ya0NvbnN0YW50c1wiLFxuXHRcdFwiZnJhbWV3b3JrQ3JlYXRlU3RhdGVzXCIsXG5cdFx0XCIkcm9vdFNjb3BlXCIsXG5cdFx0ZnVuY3Rpb24gKHgxVXRpbHMsIGZyYW1ld29ya0NvbnN0YW50cywgZnJhbWV3b3JrQ3JlYXRlU3RhdGVzLCAkcm9vdFNjb3BlKSB7XG5cdFx0XHRcInVzZSBzdHJpY3RcIjtcblxuXHRcdFx0dmFyIG5hdkl0ZW1zLCBkYXNoYm9hcmRzTWVudSwgYW5hbHl6ZU1lbnUsIGNyZWF0ZU1lbnUsIG1hbmFnZU1lbnUsIGFkbWluTWVudSwgbGltaXRlZE1lbnUsXG5cdFx0XHRcdHByb2R1Y3RUaXRsZSwgaGVscEl0ZW1zO1xuXHRcdFx0dmFyIHNob3dCZXRhQmFkZ2UgPSBmYWxzZTtcblx0XHRcdHZhciB1c2VyID0ge2ZpcnN0TmFtZTpcIlwifTtcblx0XHRcdHZhciBvcmdDYWxsQmFjayA9IG51bGw7XG5cdFx0XHR2YXIgc2VsZWN0ZWRDYWxsQmFjayA9IG51bGw7XG5cblx0XHRcdHRoaXMuc2V0VHJhbnNsYXRlZE1lbnVIZWFkZXJMYWJlbHMgPSBmdW5jdGlvbihuYXZIZWFkZXJUcmFuc2xhdGlvbnNQYXNzZWQpIHtcblx0XHRcdFx0ZGFzaGJvYXJkc01lbnUubmFtZSA9IG5hdkhlYWRlclRyYW5zbGF0aW9uc1Bhc3NlZC5kYXNoYm9hcmRzVGl0bGU7XG5cdFx0XHRcdGFuYWx5emVNZW51Lm5hbWUgPSBuYXZIZWFkZXJUcmFuc2xhdGlvbnNQYXNzZWQuYW5hbHl6ZVRpdGxlO1xuXHRcdFx0XHRjcmVhdGVNZW51Lm5hbWUgPSBuYXZIZWFkZXJUcmFuc2xhdGlvbnNQYXNzZWQuY3JlYXRlVGl0bGU7XG5cdFx0XHRcdG1hbmFnZU1lbnUubmFtZSA9IG5hdkhlYWRlclRyYW5zbGF0aW9uc1Bhc3NlZC5tYW5hZ2VUaXRsZTtcblx0XHRcdFx0YWRtaW5NZW51Lm5hbWUgPSBuYXZIZWFkZXJUcmFuc2xhdGlvbnNQYXNzZWQuYWRtaW5UaXRsZTtcblx0XHRcdFx0bGltaXRlZE1lbnUubmFtZSA9IG5hdkhlYWRlclRyYW5zbGF0aW9uc1Bhc3NlZC5saW1pdGVkVGl0bGU7XG5cdFx0XHR9O1xuXG5cdFx0XHRkYXNoYm9hcmRzTWVudSA9IHtcblx0XHRcdFx0XCJuYW1lXCI6IHgxVXRpbHMudHJhbnNsYXRlKFwieDFVaU5nRnJhbWV3b3JrLk5BVi5EQVNIQk9BUkRTXCIpLFxuXHRcdFx0XHRcImhlYWRlclwiOiB0cnVlLFxuXHRcdFx0XHRcInN0YXRlXCI6IGZyYW1ld29ya0NvbnN0YW50cy5OQVZfU1RBVEVTLkRBU0hCT0FSRFMsXG5cdFx0XHRcdFwiaWRcIjogXCJkYXNoYm9hcmRzXCIsXG5cdFx0XHRcdFwiY2xhc3NcIjogXCJkYXNoYm9hcmRzIGVtcHR5LWhlYWRlclwiLFxuXHRcdFx0XHRcImljb25cIjogXCJcIixcblx0XHRcdFx0XCJpc09wZW5cIjogdHJ1ZSxcblx0XHRcdFx0XCJhY3RpdmVcIjogdHJ1ZSxcblx0XHRcdFx0XCJpdGVtc1wiOiBbXVxuXHRcdFx0fTtcblxuXHRcdFx0YW5hbHl6ZU1lbnUgPSB7XG5cdFx0XHRcdFwibmFtZVwiOiB4MVV0aWxzLnRyYW5zbGF0ZShcIngxVWlOZ0ZyYW1ld29yay5OQVYuQU5BTFlaRVwiKSxcblx0XHRcdFx0XCJoZWFkZXJcIjogdHJ1ZSxcblx0XHRcdFx0XCJzdGF0ZVwiOiBmcmFtZXdvcmtDb25zdGFudHMuTkFWX1NUQVRFUy5BTkFMWVpFLFxuXHRcdFx0XHRcImlkXCI6IFwiYW5hbHl6ZVwiLFxuXHRcdFx0XHRcImNsYXNzXCI6IFwiYW5hbHl6ZSBlbXB0eS1oZWFkZXJcIixcblx0XHRcdFx0XCJpY29uXCI6IFwiXCIsXG5cdFx0XHRcdFwiaXNPcGVuXCI6IHRydWUsXG5cdFx0XHRcdFwiaXRlbXNcIjogW11cblx0XHRcdH07XG5cblx0XHRcdGNyZWF0ZU1lbnUgPSB7XG5cdFx0XHRcdFwibmFtZVwiOiB4MVV0aWxzLnRyYW5zbGF0ZShcIngxVWlOZ0ZyYW1ld29yay5OQVYuQ1JFQVRFXCIpLFxuXHRcdFx0XHRcImhlYWRlclwiOiB0cnVlLFxuXHRcdFx0XHRcInN0YXRlXCI6IGZyYW1ld29ya0NvbnN0YW50cy5OQVZfU1RBVEVTLkNSRUFURSxcblx0XHRcdFx0XCJpZFwiOiBcImNyZWF0ZVwiLFxuXHRcdFx0XHRcImNsYXNzXCI6IFwiY3JlYXRlIGVtcHR5LWhlYWRlclwiLFxuXHRcdFx0XHRcImljb25cIjogXCJcIixcblx0XHRcdFx0XCJpc09wZW5cIjogdHJ1ZSxcblx0XHRcdFx0XCJpdGVtc1wiOiBbXVxuXHRcdFx0fTtcblxuXHRcdFx0bWFuYWdlTWVudSA9IHtcblx0XHRcdFx0XCJuYW1lXCI6IHgxVXRpbHMudHJhbnNsYXRlKFwieDFVaU5nRnJhbWV3b3JrLk5BVi5NQU5BR0VcIiksXG5cdFx0XHRcdFwiaGVhZGVyXCI6IHRydWUsXG5cdFx0XHRcdFwic3RhdGVcIjogZnJhbWV3b3JrQ29uc3RhbnRzLk5BVl9TVEFURVMuTUFOQUdFLFxuXHRcdFx0XHRcImlkXCI6IFwibWFuYWdlXCIsXG5cdFx0XHRcdFwiY2xhc3NcIjogXCJtYW5hZ2UgZW1wdHktaGVhZGVyXCIsXG5cdFx0XHRcdFwiaWNvblwiOiBcIlwiLFxuXHRcdFx0XHRcImlzT3BlblwiOiB0cnVlLFxuXHRcdFx0XHRcIml0ZW1zXCI6IFtdXG5cdFx0XHR9O1xuXG5cdFx0XHRhZG1pbk1lbnUgPSAge1xuXHRcdFx0XHRcIm5hbWVcIjogeDFVdGlscy50cmFuc2xhdGUoXCJ4MVVpTmdGcmFtZXdvcmsuTkFWLkFETUlOXCIpLFxuXHRcdFx0XHRcImhlYWRlclwiOiB0cnVlLFxuXHRcdFx0XHRcInN0YXRlXCI6IGZyYW1ld29ya0NvbnN0YW50cy5OQVZfU1RBVEVTLkFETUlOLFxuXHRcdFx0XHRcImlkXCI6IFwiYWRtaW1cIixcblx0XHRcdFx0XCJjbGFzc1wiOiBcInBsYW4gZW1wdHktaGVhZGVyXCIsXG5cdFx0XHRcdFwiaWNvblwiOiBcIlwiLFxuXHRcdFx0XHRcImlzT3BlblwiOiB0cnVlLFxuXHRcdFx0XHRcIml0ZW1zXCI6IFtdXG5cdFx0XHR9O1xuXG5cdFx0XHRsaW1pdGVkTWVudSA9ICB7XG5cdFx0XHRcdFwibmFtZVwiOiB4MVV0aWxzLnRyYW5zbGF0ZShcIngxVWlOZ0ZyYW1ld29yay5OQVYuTElNSVRFRF9BVkFJTEFCSUxJVFlcIiksXG5cdFx0XHRcdFwiaGVhZGVyXCI6IHRydWUsXG5cdFx0XHRcdFwic3RhdGVcIjogZnJhbWV3b3JrQ29uc3RhbnRzLk5BVl9TVEFURVMuTElNSVRFRF9BVkFJTEFCSUxJVFksXG5cdFx0XHRcdFwiaWRcIjogXCJsaW1pdGVkXCIsXG5cdFx0XHRcdFwiY2xhc3NcIjogXCJsaW1pdGVkIGVtcHR5LWhlYWRlclwiLFxuXHRcdFx0XHRcImljb25cIjogXCJcIixcblx0XHRcdFx0XCJpc09wZW5cIjogdHJ1ZSxcblx0XHRcdFx0XCJpdGVtc1wiOiBbXVxuXHRcdFx0fTtcblxuXHRcdFx0bmF2SXRlbXMgPSBbZGFzaGJvYXJkc01lbnUsIGFuYWx5emVNZW51LCBjcmVhdGVNZW51LCBtYW5hZ2VNZW51LCBhZG1pbk1lbnUsIGxpbWl0ZWRNZW51XTtcblx0XHRcdGhlbHBJdGVtcyA9IFtdO1xuXG5cdFx0XHR2YXIgdG9wTGV2ZWwgPSBbXTtcblx0XHRcdHZhciBzZWNvbmRhcnlMZXZlbCA9IFtdO1xuXG5cdFx0XHRmdW5jdGlvbiBjcmVhdGVTdGF0ZXMocGFyZW50TWVudSwgaXRlbXMpIHtcblx0XHRcdFx0dmFyIGksIGxlbj1pdGVtcy5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yIChpPTA7IGk8bGVuOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgaXRlbSA9IGl0ZW1zW2ldO1xuXHRcdFx0XHRcdHgxVXRpbHMuZW5zdXJlRGVmaW5lZChpdGVtLCBcInN0YXRlQ29uZmlnLmRhdGFcIik7XG5cdFx0XHRcdFx0aWYoIWl0ZW0uc3RhdGVDb25maWcuZGF0YS5wYXJlbnRTdGF0ZXMpIHtcblx0XHRcdFx0XHRcdGl0ZW0uc3RhdGVDb25maWcuZGF0YS5wYXJlbnRTdGF0ZXMgPSBbIHBhcmVudE1lbnUuc3RhdGUgXTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ly9mb3IgYW55IGl0ZW1zIHRoYXQgbWF5IGhhdmUgbXVsdGlwbGUgcGFyZW50c01lbnVzIC0gYWxsb3dzIGZvciBjb3JyZWN0IGJyZWFkY3J1bWIgcG9wdWxhdGlvblxuXHRcdFx0XHRcdFx0aXRlbS5zdGF0ZUNvbmZpZy5kYXRhLnBhcmVudE1lbnUgPSBwYXJlbnRNZW51LnN0YXRlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpdGVtLnN0YXRlQ29uZmlnLmRhdGEubmFtZSA9IGl0ZW0uc3RhdGVDb25maWcuZGF0YS5uYW1lIHx8IGl0ZW0ubmFtZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKGk9MDsgaTxsZW47IGkrKykge1xuXHRcdFx0XHRcdGZyYW1ld29ya0NyZWF0ZVN0YXRlcy5hZGRTdGF0ZShpdGVtc1tpXS5zdGF0ZSwgaXRlbXNbaV0uc3RhdGVDb25maWcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBOYXZpZ2F0aW9uIFNlcnZpY2VzXG5cdFx0XHQgKi9cblxuXHRcdFx0dGhpcy5nZXROYXZJdGVtcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbmF2SXRlbXM7XG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLmdldFVzZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHVzZXI7XG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLnNldFVzZXIgPSBmdW5jdGlvbih1c2VyT2JqZWN0KSB7XG5cdFx0XHRcdHVzZXIgPSBhbmd1bGFyLmV4dGVuZCh1c2VyLCB1c2VyT2JqZWN0KTtcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuYWRkVG9GcmFtZXdvcmsgPSBmdW5jdGlvbihtZW51R3JvdXAsIGl0ZW1zKSB7XG5cdFx0XHRcdHZhciBtZW51O1xuXG5cdFx0XHRcdHN3aXRjaChtZW51R3JvdXApIHtcblx0XHRcdFx0XHRjYXNlIGZyYW1ld29ya0NvbnN0YW50cy5OQVZfTUVOVS5EQVNIQk9BUkRTOlxuXHRcdFx0XHRcdFx0bWVudSA9IGRhc2hib2FyZHNNZW51O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBmcmFtZXdvcmtDb25zdGFudHMuTkFWX01FTlUuQU5BTFlaRTpcblx0XHRcdFx0XHRcdG1lbnUgPSBhbmFseXplTWVudTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgZnJhbWV3b3JrQ29uc3RhbnRzLk5BVl9NRU5VLkNSRUFURTpcblx0XHRcdFx0XHRcdG1lbnUgPSBjcmVhdGVNZW51O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBmcmFtZXdvcmtDb25zdGFudHMuTkFWX01FTlUuTUFOQUdFOlxuXHRcdFx0XHRcdFx0bWVudSA9IG1hbmFnZU1lbnU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIGZyYW1ld29ya0NvbnN0YW50cy5OQVZfTUVOVS5BRE1JTjpcblx0XHRcdFx0XHRcdG1lbnUgPSBhZG1pbk1lbnU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIGZyYW1ld29ya0NvbnN0YW50cy5OQVZfTUVOVS5MSU1JVEVEX0FWQUlMQUJJTElUWTpcblx0XHRcdFx0XHRcdG1lbnUgPSBsaW1pdGVkTWVudTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgZnJhbWV3b3JrQ29uc3RhbnRzLk5PVF9PTl9NRU5VOlxuXHRcdFx0XHRcdFx0bWVudSA9IHsgXG5cdFx0XHRcdFx0XHRcdFwic3RhdGVcIjogbnVsbCxcblx0XHRcdFx0XHRcdFx0XCJpdGVtc1wiOiBbXSBcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWVudS5pdGVtcyA9IG1lbnUuaXRlbXMuY29uY2F0KGl0ZW1zKTtcblx0XHRcdFx0Y3JlYXRlU3RhdGVzKG1lbnUsIGl0ZW1zKTtcblx0XHRcdFx0JHJvb3RTY29wZS4kZW1pdChmcmFtZXdvcmtDb25zdGFudHMuRXZlbnRzLk5BVl9JVEVNU19VUERBVEVELCBuYXZJdGVtcyk7XG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLmdldERhc2hib2FyZHNNZW51ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBkYXNoYm9hcmRzTWVudTtcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuZ2V0QW5hbHl6ZU1lbnUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGFuYWx5emVNZW51O1xuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5nZXRDcmVhdGVNZW51ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBjcmVhdGVNZW51O1xuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5nZXRNYW5hZ2VNZW51ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtYW5hZ2VNZW51O1xuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5nZXRBZG1pbk1lbnUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGFkbWluTWVudTtcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuZ2V0TGltaXRlZE1lbnUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGxpbWl0ZWRNZW51O1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gYWRkIHdpZGdldHMgdG8gdG9wIG5hdlxuXHRcdFx0dGhpcy5hZGRUb1RvcE5hdiA9IGZ1bmN0aW9uKG5ld0l0ZW1zKSB7XG5cdFx0XHRcdHRvcExldmVsID0gdG9wTGV2ZWwuY29uY2F0KG5ld0l0ZW1zKTtcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuZ2V0VG9wTGV2ZWwgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHRvcExldmVsO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly9hZGQgd2lkZ2V0cyB0byBzdWJuYXZcblx0XHRcdHRoaXMuYWRkVG9TdWJOYXYgPSBmdW5jdGlvbihuZXdJdGVtcykge1xuXHRcdFx0XHRzZWNvbmRhcnlMZXZlbCA9IHNlY29uZGFyeUxldmVsLmNvbmNhdChuZXdJdGVtcyk7XG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLmdldFNlY29uZGFyeUxldmVsID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBzZWNvbmRhcnlMZXZlbDtcblx0XHRcdH07XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQ29uZmlndXJhdGlvbiBTZXJ2aWNlc1xuXHRcdFx0ICovXG5cblx0XHRcdHRoaXMuc2V0UHJvZHVjdFRpdGxlID0gZnVuY3Rpb24odGl0bGUpIHtcblx0XHRcdFx0cHJvZHVjdFRpdGxlID0gdGl0bGU7XG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLmdldFByb2R1Y3RUaXRsZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gcHJvZHVjdFRpdGxlO1xuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5zZXRTaG93QmV0YUJhZGdlID0gZnVuY3Rpb24oc2hvdykge1xuXHRcdFx0XHRzaG93QmV0YUJhZGdlID0gc2hvdztcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuZ2V0U2hvd0JldGFCYWRnZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gc2hvd0JldGFCYWRnZTtcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuYWRkSGVscEl0ZW0gPSBmdW5jdGlvbihkaXNwbGF5VGl0bGUsIGNhbGxiYWNrKSB7XG5cdFx0XHRcdGhlbHBJdGVtcy5wdXNoKHtuYW1lOiBkaXNwbGF5VGl0bGUsIGhhbmRsZUNsaWNrOiBjYWxsYmFja30pO1xuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5nZXRIZWxwSXRlbXMgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGhlbHBJdGVtcztcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuc2V0T3JnQ2FsbGJhY2sgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXHRcdFx0XHRvcmdDYWxsQmFjayA9IGNhbGxiYWNrO1xuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5nZXRPcmdDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gb3JnQ2FsbEJhY2s7XG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLnNldFNlbGVjdGVkT3JnQ2FsbGJhY2sgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXHRcdFx0XHRzZWxlY3RlZENhbGxCYWNrID0gY2FsbGJhY2s7XG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLmdldFNlbGVjdGVkT3JnQ2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHNlbGVjdGVkQ2FsbEJhY2s7XG5cdFx0XHR9O1xuXHRcdH1cblx0XSk7IiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3gxLnVpLmZyYW1ld29yaycpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgneDEudWkuZnJhbWV3b3JrJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdiYW5uZXIvYmFubmVyLmh0bWwnLFxuICAgICc8ZGl2IG5nLWlmPVwidm0uYmFubmVyVmlzaWJsZVwiIG5nLWNsYXNzPVwiW3ZtLmJhbm5lci50eXBlLCB7IHRydWU6IFxcJ21lbnUtb3BlblxcJyB9WyRwYXJlbnQuaXNTaWRlTmF2T3Blbl1dXCIgY2xhc3M9XCJmcmFtZXdvcmstYmFubmVyXCI+XFxuJyArXG4gICAgJyAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tbWRcIiBuZy1jbGFzcz1cInsgXFwnYmctc3VjY2Vzc1xcJzogXFwnZ2x5cGhpY29uLW9rLWNpcmNsZVxcJywgXFwnYmctaW5mb1xcJzogXFwnZ2x5cGhpY29uLWluZm8tY2lyY2xlXFwnIH1bdm0uYmFubmVyLnR5cGVdXCI+PC9zcGFuPlxcbicgK1xuICAgICcgICAgPHNwYW4gY2xhc3M9XCJiYW5uZXItbXNnXCI+XFxuJyArXG4gICAgJyAgICAgICAgPHNwYW4+e3t2bS5iYW5uZXIubWVzc2FnZX19PC9zcGFuPlxcbicgK1xuICAgICcgICAgICAgIDxzcGFuIGNsYXNzPVwiYnRuLWxpbmtcIiBuZy1pZj1cInZtLmJhbm5lci5saW5rVGV4dFwiIG5nLWNsaWNrPVwidm0uaXRlbUNsaWNrZWQodm0uYmFubmVyKVwiIG5nLWJpbmQ9XCJ2bS5iYW5uZXIubGlua1RleHQgfCB0cmFuc2xhdGVcIj48L3NwYW4+XFxuJyArXG4gICAgJyAgICA8L3NwYW4+XFxuJyArXG4gICAgJyAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24teHMgZ2x5cGhpY29uLXJlbW92ZVwiIG5nLWNsaWNrPVwidm0udG9nZ2xlQmFubmVyKGZhbHNlKVwiPjwvc3Bhbj5cXG4nICtcbiAgICAnPC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3gxLnVpLmZyYW1ld29yaycpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgneDEudWkuZnJhbWV3b3JrJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdicmVhZGNydW1icy9icmVhZGNydW1icy5odG1sJyxcbiAgICAnPHVsIGNsYXNzPVwiZnJhbWV3b3JrLWJyZWFkY3J1bWJzXCIgcm9sZT1cIm1lbnVcIj5cXG4nICtcbiAgICAnXHQ8bGkgcm9sZT1cIm1lbnUtaXRlbVwiIG5nLXJlcGVhdD1cImNydW1iIGluIGRhdGEuYnJlYWRjcnVtYnNcIiBuZy1jbGFzcz1cInsgXFwnbGFzdC1jcnVtYlxcJzogJGxhc3QgfVwiPlxcbicgK1xuICAgICdcdFx0PGEgY2xhc3M9XCJjcnVtYi1kdW1teVwiIG5nLWlmPVwiISRsYXN0ICYmIGNydW1iLmRhdGEuZHVtbXlMaW5rXCI+e3tnZXREaXNwbGF5TmFtZShjcnVtYil9fTwvYT5cXG4nICtcbiAgICAnXHRcdDxhIGNsYXNzPVwiY3J1bWJcIiBuZy1pZj1cIiEkbGFzdCAmJiAhY3J1bWIuZGF0YS5kdW1teUxpbmtcIiBuZy1jbGljaz1cImNoYW5nZVN0YXRlKGNydW1iKVwiPlxcbicgK1xuICAgICdcdFx0XHR7e2dldERpc3BsYXlOYW1lKGNydW1iKX19PC9hPlxcbicgK1xuICAgICdcdFx0PHNwYW4gbmctaWY9XCIhJGxhc3RcIiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodFwiPjwvc3Bhbj5cXG4nICtcbiAgICAnICAgICAgICA8YSBjbGFzcz1cImNydW1iLXNlbGVjdGVkXCIgbmctaWY9XCIkbGFzdFwiPnt7Z2V0RGlzcGxheU5hbWUoY3J1bWIpfX08L2E+XFxuJyArXG4gICAgJ1x0PC9saT5cXG4nICtcbiAgICAnPC91bD4nKTtcbn1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgneDEudWkuZnJhbWV3b3JrJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCd4MS51aS5mcmFtZXdvcmsnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2hlbHAtbWVudS9oZWxwLXBvcG92ZXIuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJ0b3AtbmF2LW1lbnUgbGlzdC1ncm91cFwiIHJvbGU9XCJtZW51XCI+XFxuJyArXG4gICAgJyAgICA8YSBuZy1yZXBlYXQ9XCJpdGVtIGluIGdldEhlbHBJdGVtcygpXCIgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW1cIiBuYW1lPVwie3tpdGVtLm5hbWUgfCB0cmFuc2xhdGV9fVwiIG5nLWNsYXNzPVwie1xcJ2Rpc2FibGVkXFwnOiBpdGVtLmRpc2FibGVkLCBcXCdhY3RpdmVcXCc6IGl0ZW0uYWN0aXZlfVwiIHJvbGU9XCJtZW51aXRlbVwiIGFyaWEtbGFiZWw9XCJ7e2l0ZW0ubmFtZSB8IHRyYW5zbGF0ZX19XCIgbmctY2xpY2s9XCJpdGVtLmhhbmRsZUNsaWNrKClcIiBuZy1rZXlkb3duPVwiYWNjZXNzaWJsZUNsaWNrKGl0ZW0sICRldmVudClcIiB0cmFuc2xhdGU9XCJ7e2l0ZW0ubmFtZX19XCI+PC9hPlxcbicgK1xuICAgICc8L2Rpdj4nKTtcbn1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgneDEudWkuZnJhbWV3b3JrJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCd4MS51aS5mcmFtZXdvcmsnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3Byb2ZpbGUvcHJvZmlsZS1wb3BvdmVyLmh0bWwnLFxuICAgICc8dWwgY2xhc3M9XCJ0b3AtbmF2LW1lbnUgbGlzdC1ncm91cFwiIHJvbGU9XCJtZW51XCI+XFxuJyArXG4gICAgJyAgICA8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW1cIj5cXG4nICtcbiAgICAnICAgICAgICA8YSBuZy1jbGljaz1cImxvZ291dCgpXCIgY2xhc3M9XCJpdGVtLW5hbWUgbGlzdC1pdGVtLWxpbmtcIiB0cmFuc2xhdGU9XCJ4MVVpTmdGcmFtZXdvcmsuUFJPRklMRS5MT0dPVVRcIj48L2E+XFxuJyArXG4gICAgJyAgICA8L2xpPlxcbicgK1xuICAgICc8L3VsPicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCd4MS51aS5mcmFtZXdvcmsnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3gxLnVpLmZyYW1ld29yaycsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnb3JnLXN3aXRjaC9vcmctc3dpdGNoLmh0bWwnLFxuICAgICc8ZGl2IG5nLWNvbnRyb2xsZXI9XCJPcmdTd2l0Y2hDb250cm9sbGVyIGFzIHZtXCI+XFxuJyArXG4gICAgJ1x0PGRpdiBjbGFzcz1cImZyYW1ld29yay1vcmctc3dpdGNoXCI+XFxuJyArXG4gICAgJ1x0XHQ8ZGl2IGNsYXNzPVwib3JnLWxpc3QtY29udGFpbmVyXCI+XFxuJyArXG4gICAgJ1x0XHRcdDx4MS1sb2FkaW5nLWJlZSBzaXplPVwiNjBweFwiIG5nLXNob3c9XCJ2bS5zaG93TG9hZGluZ1wiPjwveDEtbG9hZGluZy1iZWU+XFxuJyArXG4gICAgJ1x0XHRcdDxkaXYgbmctcmVwZWF0PVwib3JnIGluIHZtLm9yZ0FycmF5XCIgY2xhc3M9XCJvcmctbGlzdC1pdGVtXCIgbmctY2xpY2s9XCJ2bS5zZWxlY3RPcmcob3JnKVwiPlxcbicgK1xuICAgICdcdFx0XHRcdDxkaXYgY2xhc3M9XCJvcmctbGlzdC1pdGVtLXNlbGVjdGlvblwiIG5nLWNsYXNzPVwie1xcJ2VtcHR5XFwnOiFvcmcuc2VsZWN0ZWQsIFxcJ3NlbGVjdGVkXFwnOm9yZy5zZWxlY3RlZCB9XCI+PC9kaXY+XFxuJyArXG4gICAgJ1x0XHRcdFx0PGRpdiBjbGFzcz1cIml0ZW0tdGV4dC13cmFwXCI+XFxuJyArXG4gICAgJ1x0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwib3JnLWxpc3QtaXRlbS1uYW1lXCI+PHN0cm9uZz57e29yZy5vcmdOYW1lfX08L3N0cm9uZz48L2Rpdj5cXG4nICtcbiAgICAnXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJvcmctbGlzdC1pdGVtLWlkXCI+e3tvcmcub3JnSWR9fTwvZGl2PlxcbicgK1xuICAgICdcdFx0XHRcdDwvZGl2PlxcbicgK1xuICAgICdcdFx0XHQ8L2Rpdj5cXG4nICtcbiAgICAnXHRcdDwvZGl2PlxcbicgK1xuICAgICdcdDwvZGl2PlxcbicgK1xuICAgICc8L2Rpdj4nKTtcbn1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgneDEudWkuZnJhbWV3b3JrJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCd4MS51aS5mcmFtZXdvcmsnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3VzZXItbWVudS91c2VyLXBvcG92ZXIuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJ0b3AtbmF2LW1lbnUgbGlzdC1ncm91cFwiIHJvbGU9XCJtZW51XCI+XFxuJyArXG4gICAgJyAgICA8YSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbSBzd2l0Y2gtb3JnXCIgbmctY2xpY2s9XCJzd2l0Y2hPcmcoKVwiIHRyYW5zbGF0ZT1cIngxVWlOZ0ZyYW1ld29yay5VU0VSX01FTlUuU1dJVENIXCI+PC9hPlxcbicgK1xuICAgICcgICAgPCEtLSA8YSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiIG5nLWNsYXNzPVwibG9nb3V0XCIgbmctY2xpY2s9XCJsb2dvdXQoKVwiPkxvZ291dDwvYT4gLS0+XFxuJyArXG4gICAgJzwvZGl2PicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCd4MS51aS5mcmFtZXdvcmsnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3gxLnVpLmZyYW1ld29yaycsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnbWFjcm8tbWVudS9tYWNyby1tZW51Lmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwibWFjcm8tbWVudS1wb3BvdmVyXCI+XFxuJyArXG4gICAgJyAgICA8ZGl2IGNsYXNzPVwicm93XCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxkaXYgbmctY2xhc3M9XCJtYWNyb01lbnVDb2x1bW5XaWR0aCgpXCIgbmctcmVwZWF0PVwibWFjcm9NZW51SXRlbSBpbiBuYXZJdGVtcyB8IGxpbWl0VG86IG1hY3JvTWVudUNvbHVtbkxpbWl0IFwiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtYWNyby1tZW51LWhlYWRlci10aXRsZVwiPnt7bWFjcm9NZW51SXRlbS5uYW1lIHwgdHJhbnNsYXRlfX08L3NwYW4+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8aHIgY2xhc3M9XCJkaXZpZGVyXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgPHVsPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPGxpIG5nLXJlcGVhdD1cIml0ZW0gaW4gbWFjcm9NZW51SXRlbS5pdGVtc1wiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxhIG5nLWNsaWNrPVwiZ29Ub1VybChpdGVtLnN0YXRlKVwiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgICAgICB7e2l0ZW0ubmFtZXwgdHJhbnNsYXRlfX1cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICA8L2E+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8L2xpPlxcbicgK1xuICAgICcgICAgICAgICAgICAgIDwvdWw+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDwvZGl2PlxcbicgK1xuICAgICcgICAgPC9kaXY+XFxuJyArXG4gICAgJzwvZGl2PlxcbicgK1xuICAgICcnKTtcbn1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgneDEudWkuZnJhbWV3b3JrJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCd4MS51aS5mcmFtZXdvcmsnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2hvbWUvZnJhbWV3b3JrLWhvbWUuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJ0b3AtbWFjcm8tbWVudS1wb3BvdmVyXCI+XFxuJyArXG4gICAgJyAgICAgICA8c3BhbiB0b3AtbWFjcm8tbWVudT5cXG4nICtcbiAgICAnXHQgICA8L3NwYW4+XFxuJyArXG4gICAgJzwvZGl2PlxcbicgK1xuICAgICc8eDEtdG9wLW5hdmlnYXRpb24gaGFtYnVyZ2VyPVwidHJ1ZVwiIGJyYW5kPVwie3twcm9kdWN0VGl0bGUgfCB0cmFuc2xhdGV9fVwiIGJyYW5kLWhyZWY9XCIjL3dvcmtzcGFjZXNcIiBicmFuZC1iYWRnZT1cInt7c2hvd0JldGFCYWRnZSgpfX1cIiBkYXRhLWh0bWwyY2FudmFzLWlnbm9yZT1cInRydWVcIiBpcy1tb2JpbGU9XCJ0cnVlXCIgaXMtaGFtYnVyZ2VyLWFjdGl2ZT1cInRydWVcIiBpcy1maXhlZD1cInRydWVcIj5cXG4nICtcbiAgICAnXHQ8c3BhbiBuZy1pZj1cInVzZXJcIiBjbGFzcz1cImNsaWVudC1kZXRhaWxzXCIgZGF0YS10cmlnZ2VyPVwiaG92ZXJcIiBkYXRhLXBsYWNlbWVudD1cImJvdHRvbVwiIGRhdGEtdGl0bGU9XCJ7e3VzZXIubWFzdGVyU3ViQ2xpZW50SWRzW3VzZXIuY2xpZW50SWRdfX0gLSB7e3VzZXIuY2xpZW50SWR9fVwiIHgxLXRvb2x0aXA+XFxuJyArXG4gICAgJ1x0XHQ8c3BhbiBjbGFzcz1cIm5hdmJhci1icmFuZFwiPnt7dXNlci5tYXN0ZXJTdWJDbGllbnRJZHNbdXNlci5jbGllbnRJZF19fTwvc3Bhbj5cXG4nICtcbiAgICAnXHQ8L3NwYW4+XFxuJyArXG4gICAgJ1x0PHNwYW4gbmctaWY9XCJ1c2VyLm9yZ05hbWVcIiBjbGFzcz1cIm5hdmJhci1vcmdcIj5cXG4nICtcbiAgICAnXHRcdDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0XCI+PC9zcGFuPlxcbicgK1xuICAgICdcdFx0PHNwYW4gY2xhc3M9XCJvcmctdGV4dFwiPnt7dXNlci5vcmdOYW1lfX08L3NwYW4+XFxuJyArXG4gICAgJ1x0PC9zcGFuPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnXHQ8aDIgaWQ9XCJ4MVRvcE5hdlNlY29uZGFyeVwiIGNsYXNzPVwic3Itb25seVwiIHRyYW5zbGF0ZT1cIngxVWlOZ1RvcE5hdmlnYXRpb25EZW1vLk5BVjJfU1JfVEVYVFwiPjwvaDI+XFxuJyArXG4gICAgJ1x0PHVsIGNsYXNzPVwibmF2IG5hdmJhci1uYXYgbmF2YmFyLXJpZ2h0IGZyYW1ld29yay1uYXZcIiByb2xlPVwibWVudVwiIGFyaWEtbGFiZWxsZWRieT1cIngxVG9wTmF2U2Vjb25kYXJ5XCI+XFxuJyArXG4gICAgJ1x0XHQ8bGkgcm9sZT1cIm1lbnVpdGVtXCIgbmctcmVwZWF0PVwiaXRlbSBpbiB0b3BMZXZlbFwiPlxcbicgK1xuICAgICdcdFx0XHQ8ZnctdG9wLWxldmVsIGl0ZW09XCJpdGVtXCI+PC9mdy10b3AtbGV2ZWw+XFxuJyArXG4gICAgJ1x0XHQ8L2xpPlxcbicgK1xuICAgICdcdFx0PGxpIHJvbGU9XCJtZW51aXRlbVwiIGNsYXNzPVwiZHJvcGRvd25cIj5cXG4nICtcbiAgICAnXHRcdFx0PGEgeDEtcG9wb3Zlcj1cIntwbGFjZW1lbnQ6IFxcJ2JvdHRvbS1sZWZ0XFwnfVwiIHBsYWNlbWVudD1cImJvdHRvbS1sZWZ0XCIgb3V0c2lkZS1jbGljaz1cInRydWVcIiBjb250ZW50LXRlbXBsYXRlPVwidXNlci1tZW51L3VzZXItcG9wb3Zlci5odG1sXCIgY2xhc3M9XCJtYWluLW1lbnUtbGluayB1c2VyLW1lbnVcIj5cXG4nICtcbiAgICAnXHRcdFx0XHQ8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tbWQgZ2x5cGhpY29uLXVzZXIgcHVsbC1sZWZ0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPlxcbicgK1xuICAgICdcdFx0XHRcdDxzcGFuIGNsYXNzPVwidXNlci1hY3Rpb25zLW5hdi10ZXh0XCI+e3sgdXNlci5maXJzdE5hbWUgfX08L3NwYW4+XFxuJyArXG4gICAgJ1x0XHRcdDwvYT5cXG4nICtcbiAgICAnXHRcdDwvbGk+XFxuJyArXG4gICAgJ1x0XHQ8bGkgcm9sZT1cIm1lbnVpdGVtXCI+XFxuJyArXG4gICAgJ1x0XHRcdDxhIHgxLXBvcG92ZXI9XCJ7cGxhY2VtZW50OiBcXCdib3R0b20tbGVmdFxcJ31cIiBwbGFjZW1lbnQ9XCJib3R0b20tbGVmdFwiIG91dHNpZGUtY2xpY2s9XCJ0cnVlXCIgY29udGVudC10ZW1wbGF0ZT1cImhlbHAtbWVudS9oZWxwLXBvcG92ZXIuaHRtbFwiIGNsYXNzPVwibWFpbi1tZW51LWxpbmtcIj5cXG4nICtcbiAgICAnXHRcdFx0PCEtLTxhIHgxLXBvcG92ZXI9XCJoZWxwUG92ZXJcIiBvdXRzaWRlLWNsaWNrPVwidHJ1ZVwiIGNsYXNzPVwibWFpbi1tZW51LWxpbmtcIj4tLT5cXG4nICtcbiAgICAnXHRcdFx0XHQ8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tbWQgZ2x5cGhpY29uLXF1ZXN0aW9uLWNpcmNsZSBwdWxsLWxlZnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+XFxuJyArXG4gICAgJ1x0XHRcdFx0PHNwYW4gdHJhbnNsYXRlPVwieDFVaU5nRnJhbWV3b3JrLkNPTlRST0xTLkhFTFBcIj48L3NwYW4+XFxuJyArXG4gICAgJ1x0XHRcdDwvYT5cXG4nICtcbiAgICAnXHRcdDwvbGk+XFxuJyArXG4gICAgJ1x0XHQ8bGkgcm9sZT1cIm1lbnVpdGVtXCI+XFxuJyArXG4gICAgJ1x0XHRcdDxzcGFuIGNsYXNzPVwic3Itb25seVwiIHRyYW5zbGF0ZT1cIngxVWlOZ0ZyYW1ld29yay5JQk1cIj48L3NwYW4+XFxuJyArXG4gICAgJ1x0XHRcdDxzcGFuIGNsYXNzPVwibmF2YmFyLWJyYW5kIGlibS1sb2dvXCIgdGl0bGU9XCJ7e1xcJ3gxVWlOZ0ZyYW1ld29yay5JQk1cXCcgfCB0cmFuc2xhdGV9fVwiPjwvc3Bhbj5cXG4nICtcbiAgICAnXHRcdDwvbGk+XFxuJyArXG4gICAgJ1x0PC91bD5cXG4nICtcbiAgICAnPC94MS10b3AtbmF2aWdhdGlvbj5cXG4nICtcbiAgICAnPHgxLXNpZGUtbmF2aWdhdGlvbiBpcy1vcGVuPVwiaXNTaWRlTmF2T3BlblwiIGl0ZW1zPVwibmF2SXRlbXNcIiBpcy1zdGF0ZWZ1bD1cInRydWVcIiBkYXRhLWh0bWwyY2FudmFzLWlnbm9yZT1cInRydWVcIj48L3gxLXNpZGUtbmF2aWdhdGlvbj5cXG4nICtcbiAgICAnPHNlY3Rpb24gY2xhc3M9XCJiYW5uZXItYWxlcnRzXCIgbmctY2xhc3M9XCJ7XFwnc2lkZS1uYXYtb3BlblxcJzogaXNTaWRlTmF2T3Blbn1cIiBuZy1pZj1cImFsZXJ0cy5sZW5ndGggPiAwXCI+XFxuJyArXG4gICAgJ1x0PGFsZXJ0IG5nLXJlcGVhdD1cImFsZXJ0IGluIGFsZXJ0cyB0cmFjayBieSAkaW5kZXhcIiB0eXBlPVwie3thbGVydFswXS50eXBlfX1cIiBjbG9zZT1cImNsb3NlQWxlcnQoJGluZGV4KVwiPlxcbicgK1xuICAgICdcdFx0PHNwYW4gY2xhc3M9XCJnbHlwaGljb25cIiBuZy1jbGFzcz1cInNldEljb24oYWxlcnRbMF0pXCI+PC9zcGFuPlxcbicgK1xuICAgICdcdFx0PG5nLWluY2x1ZGUgc3JjPVwiXFwnYWxlcnRzL2FsZXJ0LXRlbXBsYXRlcy9cXCcgKyBhbGVydFswXS5sb2NhbGl6YXRpb25LZXkgK1xcJy5odG1sXFwnXCI+PC9uZy1pbmNsdWRlPlxcbicgK1xuICAgICdcdDwvYWxlcnQ+XFxuJyArXG4gICAgJzwvc2VjdGlvbj5cXG4nICtcbiAgICAnPGZ3LWJhbm5lciBjbGFzcz1cImJhbm5lci1jb250YWluZXJcIj48L2Z3LWJhbm5lcj5cXG4nICtcbiAgICAnPGRpdiBjbGFzcz1cInN1Ym5hdlwiIG5nLWNsYXNzPVwieyBcXCdtZW51LW9wZW5cXCc6IGlzU2lkZU5hdk9wZW4gfVwiPlxcbicgK1xuICAgICdcdDxmdy1icmVhZC1jcnVtYnM+PC9mdy1icmVhZC1jcnVtYnM+XFxuJyArXG4gICAgJ1x0PHVsIGNsYXNzPVwibmF2IG5hdmJhci1uYXYgbmF2YmFyLXJpZ2h0XCIgcm9sZT1cIm1lbnVcIj5cXG4nICtcbiAgICAnXHRcdDxsaSByb2xlPVwibWVudWl0ZW1cIiBuZy1yZXBlYXQ9XCJ3aWRnIGluIHN1Yk5hdldpZGdldHNcIiBuZy1pZj1cIndpZGcubWFrZVZpc2libGVcIj5cXG4nICtcbiAgICAnXHRcdFx0PGZ3LXRvcC1sZXZlbCBpdGVtPVwid2lkZy53aWRnZXRcIj48L2Z3LXRvcC1sZXZlbD5cXG4nICtcbiAgICAnXHRcdDwvbGk+XFxuJyArXG4gICAgJ1x0PC91bD5cXG4nICtcbiAgICAnPC9kaXY+XFxuJyArXG4gICAgJzxzZWN0aW9uIHVpLXZpZXcgY2xhc3M9XCJob21lLWNvbnRlbnRcIiBuZy1jbGFzcz1cIntcXCdtZW51LW9wZW5cXCc6IGlzU2lkZU5hdk9wZW59XCI+PHA+IDwvcD5cXG4nICtcbiAgICAnPC9zZWN0aW9uPlxcbicgK1xuICAgICc8c2VjdGlvbiBjbGFzcz1cImNvbnRleHR1YWwtaGVscFwiIG5nLWlmPVwiYXBwTWV0YWRhdGEuc2hvd0NvbnRleHR1YWxIZWxwICYmIGNvbnRleHR1YWxIZWxwTWVzc2FnZVwiIG5nLW1vdXNlZW50ZXI9XCJjb250ZXh0dWFsSGVscE1vdXNlRW50ZXIoKVwiIG5nLW1vdXNlbGVhdmU9XCJjb250ZXh0dWFsSGVscE1vdXNlTGVhdmUoKVwiPlxcbicgK1xuICAgICdcdDxkaXYgY2xhc3M9XCJjb250ZXh0dWFsLWhlbHAtaWNvbi1jb250YWluZXJcIj5cXG4nICtcbiAgICAnXHRcdDxkaXYgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWxnIGdseXBoaWNvbi1xdWVzdGlvbi1jaXJjbGUgY29udGV4dHVhbC1oZWxwLWljb25cIj48L2Rpdj5cXG4nICtcbiAgICAnXHQ8L2Rpdj5cXG4nICtcbiAgICAnXHQ8cCBjbGFzcz1cImNvbnRleHR1YWwtaGVscC1tZXNzYWdlXCIgdHJhbnNsYXRlPVwiaWJtZGEuY29udGV4dHVhbEhlbHBNZXNzYWdlcy57e2NvbnRleHR1YWxIZWxwTWVzc2FnZX19XCI+PC9wPlxcbicgK1xuICAgICdcdDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi14cyBnbHlwaGljb24tcmVtb3ZlIGNvbnRleHR1YWwtaGVscC1jbG9zZVwiIG5nLWNsaWNrPVwiY2xvc2VDb250ZXh0dWFsSGVscE1lc3NhZ2UoKVwiPjwvc3Bhbj5cXG4nICtcbiAgICAnXHQ8ZGl2IGNsYXNzPVwiY29udGV4dHVhbC1oZWxwLWNvbnRyb2xzXCI+PGEgbmctY2xpY2s9XCJjbG9zZUNvbnRleHR1YWxIZWxwTWVzc2FnZSgpXCIgdHJhbnNsYXRlPVwiaWJtZGEuY29udGV4dHVhbEhlbHBNZXNzYWdlcy5va0dvdEl0XCI+PC9hPiB8IDxhIG5nLWNsaWNrPVwiZG9udFNob3dDb250ZXh0dWFsSGVscEZvcmV2ZXIoKVwiIHRyYW5zbGF0ZT1cImlibWRhLmNvbnRleHR1YWxIZWxwTWVzc2FnZXMuZG9udFNob3dUaGVzZUFnYWluXCI+PC9hPjwvZGl2PlxcbicgK1xuICAgICc8L3NlY3Rpb24+XFxuJyArXG4gICAgJycpO1xufV0pO1xufSkoKTtcbiJdfQ==
